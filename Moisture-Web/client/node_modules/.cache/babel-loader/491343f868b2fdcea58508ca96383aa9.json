{"ast":null,"code":"var _jsxFileName = \"/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport 'react-bootstrap';\nimport Nav from './features/navBar';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { Line } from 'react-chartjs-2';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = {\n  plugins: {\n    legend: {\n      display: false\n    }\n  },\n  layout: {\n    padding: {\n      bottom: 100\n    }\n  },\n  scales: {\n    y: {\n      ticks: {\n        color: \"white\",\n        font: {\n          size: 18\n        }\n      },\n      grid: {\n        color: \"#243240\"\n      }\n    },\n    x: {\n      ticks: {\n        color: \"white\",\n        font: {\n          size: 18\n        }\n      }\n    }\n  }\n};\nconst cooperCityWeatherId = 4151824;\nconst apiKey = process.env.REACT_APP_WEATHER_KEY;\nconst WeatherApiUrl = `http://api.openweathermap.org/data/2.5/weather?id=${cooperCityWeatherId}&appid=${apiKey}`;\n\nfunction Home() {\n  _s();\n\n  //usestate of weather data, can be an array\n  //useState of soil Moisture data, can also be an array\n  const [weatherData, setWeatherData] = useStateIfMounted({\n    main: '',\n    weather: [],\n    temp: []\n  });\n  const [soilMoisture, setSoilMoisture] = useState({\n    soilMoisture: ''\n  });\n  const [chartData, setChartData] = useStateIfMounted({}); //API data with a promise resolve nad useEffect\n\n  useEffect(() => {\n    let isMounted = true;\n\n    const fetchData = () => {\n      Promise.all([fetch(WeatherApiUrl).then(resp => resp.json()).then(weather => {\n        if (isMounted) {\n          setWeatherData({\n            main: weather.main,\n            weather: weather.weather,\n            temp: [...weatherData.temp, weather.main.temp]\n          });\n          setChartData({\n            labels: ['pog'],\n            datasets: [{\n              label: \"Soil Moisture\",\n              data: [69],\n              backgroundColor: [\"rgba(75, 192, 192, 0.6)\"],\n              borderWidth: 4\n            }]\n          });\n        }\n      }) //fetch('/api').then(resp => resp.json()).then(moisture => setSoilMoisture(moisture)),\n      ]);\n    };\n\n    fetchData();\n    console.log(weatherData.weather[0].description);\n    return () => {\n      //        cleanup\n      isMounted = false; // This worked for me\n    };\n  }, [weatherData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Home\",\n    children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: chartData,\n        options: options,\n        redraw: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Home, \"R3TvB9She+9BLuwj0JcM4S858v4=\", true);\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/Home.js"],"names":["React","useState","useEffect","Link","Nav","Line","Chart","options","plugins","legend","display","layout","padding","bottom","scales","y","ticks","color","font","size","grid","x","cooperCityWeatherId","apiKey","process","env","REACT_APP_WEATHER_KEY","WeatherApiUrl","Home","weatherData","setWeatherData","useStateIfMounted","main","weather","temp","soilMoisture","setSoilMoisture","chartData","setChartData","isMounted","fetchData","Promise","all","fetch","then","resp","json","labels","datasets","label","data","backgroundColor","borderWidth","console","log","description"],"mappings":"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","sourcesContent":["\nimport React, {useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport 'react-bootstrap';\nimport Nav from './features/navBar' ;\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { Line } from 'react-chartjs-2';\nimport Chart from 'chart.js/auto'\n\n\n\nconst options = {\n  plugins:{legend:{display:false}},\n  layout:{padding:{bottom:100}},\n  scales: {\n    y:{\n      ticks:{\n        color:\"white\",\n        font:{\n          size:18\n        }\n      },\n      grid:{\n        color:\"#243240\"\n      }\n    },\n    x:{\n      ticks:{\n        color:\"white\",\n        font:{\n          size:18\n        }\n      }\n    }\n  },\n};\n\n\nconst cooperCityWeatherId = 4151824;\nconst apiKey = process.env.REACT_APP_WEATHER_KEY;\n\n\n\n\n\nconst WeatherApiUrl = `http://api.openweathermap.org/data/2.5/weather?id=${cooperCityWeatherId}&appid=${apiKey}`\n\nfunction Home(){\n    //usestate of weather data, can be an array\n    //useState of soil Moisture data, can also be an array\n    const [weatherData, setWeatherData] = useStateIfMounted({main: '', weather : [], temp: []});\n    const [soilMoisture, setSoilMoisture] = useState({soilMoisture: ''});\n    const [chartData, setChartData] = useStateIfMounted({})\n\n    \n    //API data with a promise resolve nad useEffect\n    useEffect(() => {\n        let isMounted = true;\n        const fetchData = () =>{\n            \n            Promise.all([\n                fetch(WeatherApiUrl).then((resp)=> resp.json()).then(weather => {\n                    if(isMounted){\n                        setWeatherData({main : weather.main, weather : weather.weather, temp: [...weatherData.temp, weather.main.temp]})\n                        setChartData({\n                            labels: ['pog'],\n                          datasets: [\n                            {\n                              label: \"Soil Moisture\",\n                              data: [69],\n                              backgroundColor: [\"rgba(75, 192, 192, 0.6)\"],\n                              borderWidth: 4\n                            }\n                          ]\n                        });\n                    }\n                }) \n                //fetch('/api').then(resp => resp.json()).then(moisture => setSoilMoisture(moisture)),\n            ])\n        \n        }\n        \n        \n       fetchData()\n       \n        console.log(weatherData.weather[0].description)\n       return () => {\n    //        cleanup\n       isMounted = false; // This worked for me\n      };\n       \n    },[weatherData])\n    \n\n    return(\n        <div className=\"Home\">\n            <Nav />\n            <div>\n                \n            <Line data={chartData} options={options} redraw />\n            </div>\n        </div>\n\n        \n        \n    );\n\n\n\n\n}\nexport default Home;\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}