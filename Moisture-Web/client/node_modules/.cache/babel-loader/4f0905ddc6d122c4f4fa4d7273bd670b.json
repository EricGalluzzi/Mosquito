{"ast":null,"code":"var _jsxFileName = \"/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/testFeatures/BreakComputer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { ProgressBar } from 'react-bootstrap';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n\nconst LineChartTest = chart => {\n  _s();\n\n  let [vBat, setVBat] = useState(0);\n  let [dataSet, setDataSet] = useState([]);\n  let [bigArray, setBigArray] = useState([]);\n  useEffect(() => {\n    if (typeof chart !== \"undefined\") {\n      initializeBigArray(chart);\n      console.log(bigArray); //createDataSets()\n    }\n  }, [chart]); //Rerenders when chart updates. Originally, vBat would remain unchanged since its state would never change. By passing the prop as an argument, the page renders with the asynchronous passing of chart (chart was passed through an async array)\n\n  const initializeBigArray = chart => {\n    chart.data.map(x => {\n      x.entry.map(y => {\n        let exists = findIfIdExists(y.id);\n        if (exists == -1) setBigArray(prevState => [...bigArray, [y]]);else setBigArray(prevState => prevState[exists].push(y));\n      });\n    });\n  };\n\n  const findIfIdExists = y => {\n    for (let i = 0; i < bigArray.length; i++) {\n      let exists = bigArray[i].some(entries => {\n        return entries.id == y;\n      });\n      if (exists) return i;\n    }\n\n    return -1;\n  }; //essentially just map a dataset. \n  //   const createDataSets =() =>{\n  //         setDataSet(chart?.data[0]?.soilMoisture?.map((x,i) =>({\n  //         label: (typeof chart.data[0].sensorId === 'undefined') ? 'No Sensor ID' : chart?.data[0]?.sensorId[0],\n  //         data: chart?.data?.map(x=> (x.soilMoisture[i] === 'undefined') ? 0 : x.soilMoisture[i]) ,//might not need\n  //         borderWidth: 1,\n  //         fill: false,\n  //         borderColor: 'red'\n  //     })))\n  //   }\n\n\n  console.log(chart.data[1].soilMoisture[1]); // var moistureData = {\n  //   labels: chart ?.data.map(x => String(x.expirationSet).substring(0, 10)),\n  //   datasets: dataSet\n  // };\n  // var options = {\n  //   maintainAspectRatio: false,\n  //   scales: {\n  //   },\n  //   legend: {\n  //     labels: {\n  //       fontSize: 25,\n  //     },\n  //   },\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"moistureGraph\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 7\n  }, this);\n};\n\n_s(LineChartTest, \"blaJgpNQS+QPp/CgN2gr4c0UMeU=\");\n\n_c = LineChartTest;\nexport default LineChartTest;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineChartTest\");","map":{"version":3,"sources":["/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/testFeatures/BreakComputer.js"],"names":["React","useState","useEffect","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","ProgressBar","Line","register","LineChartTest","chart","vBat","setVBat","dataSet","setDataSet","bigArray","setBigArray","initializeBigArray","console","log","data","map","x","entry","y","exists","findIfIdExists","id","prevState","push","i","length","some","entries","soilMoisture"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SACEC,KAAK,IAAIC,OADX,EAEEC,aAFF,EAGEC,WAHF,EAIEC,YAJF,EAKEC,WALF,EAMEC,KANF,EAOEC,OAPF,EAQEC,MARF,QASO,UATP;AAUA,SAASC,WAAT,QAA4B,iBAA5B;AACA,SAASC,IAAT,QAAqB,iBAArB;;AAEAT,OAAO,CAACU,QAAR,CACET,aADF,EAEEC,WAFF,EAGEC,YAHF,EAIEC,WAJF,EAKEC,KALF,EAMEC,OANF,EAOEC,MAPF;;AAWA,MAAMI,aAAa,GAAIC,KAAD,IAAW;AAAA;;AAC7B,MAAI,CAACC,IAAD,EAAOC,OAAP,IAAkBjB,QAAQ,CAAC,CAAD,CAA9B;AACA,MAAI,CAACkB,OAAD,EAAUC,UAAV,IAAwBnB,QAAQ,CAAC,EAAD,CAApC;AACA,MAAI,CAACoB,QAAD,EAAWC,WAAX,IAA0BrB,QAAQ,CAAC,EAAD,CAAtC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAG,OAAOc,KAAP,KAAiB,WAApB,EAAgC;AAC5BO,MAAAA,kBAAkB,CAACP,KAAD,CAAlB;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ,EAF4B,CAGlC;AACG;AACJ,GANQ,EAMN,CAACL,KAAD,CANM,CAAT,CAJ6B,CAUjB;;AAGd,QAAMO,kBAAkB,GAAIP,KAAD,IAAU;AAEnCA,IAAAA,KAAK,CAACU,IAAN,CAAWC,GAAX,CAAeC,CAAC,IAAI;AAEhBA,MAAAA,CAAC,CAACC,KAAF,CAAQF,GAAR,CAAYG,CAAC,IAAG;AACZ,YAAIC,MAAM,GAAGC,cAAc,CAACF,CAAC,CAACG,EAAH,CAA3B;AACA,YAAGF,MAAM,IAAI,CAAC,CAAd,EAAiBT,WAAW,CAACY,SAAS,IAAI,CAAC,GAAGb,QAAJ,EAAc,CAACS,CAAD,CAAd,CAAd,CAAX,CAAjB,KACKR,WAAW,CAACY,SAAS,IAAIA,SAAS,CAACH,MAAD,CAAT,CAAkBI,IAAlB,CAAuBL,CAAvB,CAAd,CAAX;AACZ,OAJG;AASL,KAXC;AAYH,GAdC;;AAgBA,QAAME,cAAc,GAAIF,CAAD,IAAO;AAC5B,SAAI,IAAIM,CAAC,GAAE,CAAX,EAAcA,CAAC,GAAEf,QAAQ,CAACgB,MAA1B,EAAkCD,CAAC,EAAnC,EAAsC;AAClC,UAAIL,MAAM,GAAGV,QAAQ,CAACe,CAAD,CAAR,CAAYE,IAAZ,CAAiBC,OAAO,IAAI;AACrC,eAAOA,OAAO,CAACN,EAAR,IAAcH,CAArB;AACH,OAFY,CAAb;AAGA,UAAGC,MAAH,EAAW,OAAOK,CAAP;AAGd;;AACD,WAAO,CAAC,CAAR;AACD,GAVD,CA7B+B,CAwC/B;AAEF;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACEZ,EAAAA,OAAO,CAACC,GAAR,CAAYT,KAAK,CAACU,IAAN,CAAW,CAAX,EAAcc,YAAd,CAA2B,CAA3B,CAAZ,EAtD+B,CA4D7B;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CA1FH;;GAAMzB,a;;KAAAA,a;AA4FJ,eAAeA,aAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { ProgressBar } from 'react-bootstrap';\nimport { Line } from 'react-chartjs-2';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\n\nconst LineChartTest = (chart) => {\n    let [vBat, setVBat] = useState(0);\n    let [dataSet, setDataSet] = useState([]);\n    let [bigArray, setBigArray] = useState([]);\n    useEffect(() => {\n        if(typeof chart !== \"undefined\"){\n            initializeBigArray(chart);\n            console.log(bigArray);\n      //createDataSets()\n        }\n    }, [chart]) //Rerenders when chart updates. Originally, vBat would remain unchanged since its state would never change. By passing the prop as an argument, the page renders with the asynchronous passing of chart (chart was passed through an async array)\n  \n  \n  const initializeBigArray = (chart) =>{\n        \n    chart.data.map(x => {\n\n        x.entry.map(y=> {\n            let exists = findIfIdExists(y.id);\n            if(exists == -1) setBigArray(prevState => [...bigArray, [y]]);\n            else setBigArray(prevState => prevState[exists].push(y));\n    } ) \n    \n    \n\n\n  })\n}\n\n  const findIfIdExists = (y) => {\n    for(let i =0; i< bigArray.length; i++){\n        let exists = bigArray[i].some(entries => {\n            return entries.id == y;\n        });\n        if(exists) return i;\n\n        \n    }\n    return -1;\n  }\n  //essentially just map a dataset. \n\n//   const createDataSets =() =>{\n    \n    \n//         setDataSet(chart?.data[0]?.soilMoisture?.map((x,i) =>({\n//         label: (typeof chart.data[0].sensorId === 'undefined') ? 'No Sensor ID' : chart?.data[0]?.sensorId[0],\n//         data: chart?.data?.map(x=> (x.soilMoisture[i] === 'undefined') ? 0 : x.soilMoisture[i]) ,//might not need\n//         borderWidth: 1,\n//         fill: false,\n//         borderColor: 'red'\n//     })))\n    \n//   }\n  console.log(chart.data[1].soilMoisture[1])\n  \n  \n  \n  \n    \n    // var moistureData = {\n    //   labels: chart ?.data.map(x => String(x.expirationSet).substring(0, 10)),\n    //   datasets: dataSet\n    // };\n  \n    // var options = {\n    //   maintainAspectRatio: false,\n    //   scales: {\n    //   },\n    //   legend: {\n    //     labels: {\n    //       fontSize: 25,\n    //     },\n    //   },\n    // }\n    \n  \n    return (\n      <div>\n        <br />\n        <br />\n        <div className='moistureGraph'>\n          {/* <Line\n            data={moistureData}\n            height={400}\n            options={options}\n          /> */}\n  \n        </div></div>\n    )\n  }\n  \n  export default LineChartTest"]},"metadata":{},"sourceType":"module"}