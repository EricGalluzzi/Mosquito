{"ast":null,"code":"var _jsxFileName = \"/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/testFeatures/BreakComputer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { ProgressBar } from 'react-bootstrap';\nimport { Line, Bar } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n\nconst BreakComputer = chart => {\n  _s();\n\n  let [vBat, setVBat] = useState([]); //format, array of object ID and vBat\n\n  let [dataSet, setDataSet] = useState([]);\n  let [bigArray, setBigArray] = useState([]);\n  let [bigArrayLoaded, setBigArrayLoaded] = useState(false);\n  let [isLoaded, setLoaded] = useState(false); //duplicate testing for dev\n\n  useEffect(() => {\n    console.log(chart);\n\n    if (chart.data.length > 0) {\n      if (!isLoaded) {\n        initializeBigArray();\n        createDataSets();\n        setLoaded(true);\n        vBatDisplay();\n      }\n    } //createDataSets()\n\n  }, [chart]); //Rerenders when chart updates. Originally, vBat would remain unchanged since its state would never change. By passing the prop as an argument, the page renders with the asynchronous passing of chart (chart was passed through an async array)\n\n  const initializeBigArray = () => {\n    let copy = bigArray;\n    chart.data.map(x => {\n      x.entry.map(y => {\n        let exists = findIfIdExists(y.sensorId, copy); // console.log(exists);\n        // console.log(y);\n        // console.log(bigArray)\n\n        if (exists == -1) {\n          copy.push([y]);\n        } else {\n          console.log(\"hey:\");\n          console.log(copy); // var valueArr = copy[exists].map((item)=> item.expirationSet );\n          // if(!valueArr.some((item, idx)=> item == y.expirationSet )) \n\n          copy[exists].push(y); //delete duplicates because initializeBigArray is called twice\n        }\n      });\n    });\n    setBigArray(copy);\n    setBigArrayLoaded(true);\n  };\n\n  const findIfIdExists = (y, copy) => {\n    for (let i = 0; i < copy.length; i++) {\n      console.log(y);\n      let exists = copy[i].find(entries => entries.sensorId == y);\n      if (exists != undefined) return i;\n      console.log(\"i didnt\");\n    }\n\n    return -1;\n  }; //essentially just map a dataset. \n\n\n  const createDataSets = () => {\n    setDataSet(bigArray.map((x, i) => ({\n      label: typeof x[0].sensorId === 'undefined' ? 'No Sensor ID' : x[0].sensorId,\n      data: x.map(x => x.soilMoisture),\n      //might not need\n      borderWidth: 1,\n      fill: false,\n      borderColor: 'red'\n    })));\n  };\n\n  const vBatDisplay = () => {\n    if (bigArrayLoaded) {\n      setVBat(bigArray.map(x => ({\n        \"sensorId\": typeof x[0].sensorId === 'undefined' ? 'No Sensor ID' : x[0].sensorId,\n        \"vBat\": x[x.length - 1].VBat\n      })));\n    }\n  };\n\n  var moistureData = {\n    labels: \"hip\",\n    //fix for legend lengths\n    datasets: dataSet\n  };\n  var options = {\n    maintainAspectRatio: false,\n    plugins: {\n      title: {\n        display: true,\n        text: 'Soil Moisture Data'\n      }\n    },\n    scales: {},\n    legend: {\n      labels: {\n        fontSize: 25\n      }\n    }\n  };\n  const displayVBat = {\n    labels: vBat.map(x => x.sensorId),\n    datasets: [{\n      label: 'Battery Voltage',\n      backgroundColor: 'rgba(75,192,192,1)',\n      borderColor: 'rgba(0,0,0,1)',\n      borderWidth: 2,\n      data: vBat.map(x => x.VBat)\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"moistureGraph\",\n      children: [/*#__PURE__*/_jsxDEV(Line, {\n        data: moistureData,\n        height: 400,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Bar, {\n        data: displayVBat,\n        height: 400,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BreakComputer, \"nj//aGU7dS07SE4kEaip9CvVSCI=\");\n\n_c = BreakComputer;\nexport default BreakComputer;\n\nvar _c;\n\n$RefreshReg$(_c, \"BreakComputer\");","map":{"version":3,"sources":["/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/testFeatures/BreakComputer.js"],"names":["React","useState","useEffect","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","ProgressBar","Line","Bar","register","BreakComputer","chart","vBat","setVBat","dataSet","setDataSet","bigArray","setBigArray","bigArrayLoaded","setBigArrayLoaded","isLoaded","setLoaded","console","log","data","length","initializeBigArray","createDataSets","vBatDisplay","copy","map","x","entry","y","exists","findIfIdExists","sensorId","push","i","find","entries","undefined","label","soilMoisture","borderWidth","fill","borderColor","VBat","moistureData","labels","datasets","options","maintainAspectRatio","plugins","title","display","text","scales","legend","fontSize","displayVBat","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { ProgressBar } from 'react-bootstrap';\nimport { Line, Bar } from 'react-chartjs-2';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\n\nconst BreakComputer = (chart) => {\n  let [vBat, setVBat] = useState([]); //format, array of object ID and vBat\n  let [dataSet, setDataSet] = useState([]);\n  let [bigArray, setBigArray] = useState([]);\n  let [bigArrayLoaded, setBigArrayLoaded] = useState(false);\n  let [isLoaded, setLoaded] = useState(false); //duplicate testing for dev\n  useEffect(() => {\n    console.log(chart)\n\n    if (chart.data.length > 0) {\n      if (!isLoaded) {\n\n        initializeBigArray();\n        createDataSets();\n        setLoaded(true);\n        vBatDisplay();\n      }\n    }\n\n    //createDataSets()\n\n  }, [chart]) //Rerenders when chart updates. Originally, vBat would remain unchanged since its state would never change. By passing the prop as an argument, the page renders with the asynchronous passing of chart (chart was passed through an async array)\n\n\n  const initializeBigArray = () => {\n    let copy = bigArray;\n\n    chart.data.map(x => {\n\n      x.entry.map(y => {\n\n        let exists = findIfIdExists(y.sensorId, copy);\n        // console.log(exists);\n        // console.log(y);\n        // console.log(bigArray)\n        if (exists == -1) {\n          copy.push([y]);\n        }\n        else {\n\n          console.log(\"hey:\")\n          console.log(copy)\n\n          // var valueArr = copy[exists].map((item)=> item.expirationSet );\n          // if(!valueArr.some((item, idx)=> item == y.expirationSet )) \n          copy[exists].push(y); //delete duplicates because initializeBigArray is called twice\n\n\n        }\n      })\n\n\n\n\n    })\n    setBigArray(copy)\n    setBigArrayLoaded(true);\n  }\n\n  const findIfIdExists = (y, copy) => {\n    for (let i = 0; i < copy.length; i++) {\n      console.log(y)\n      let exists = copy[i].find(entries => entries.sensorId == y);\n\n\n      if (exists != undefined) return i;\n      console.log(\"i didnt\");\n\n\n    }\n\n    return -1;\n  }\n\n  //essentially just map a dataset. \n\n  const createDataSets = () => {\n\n\n    setDataSet(bigArray.map((x, i) => ({\n      label: (typeof x[0].sensorId === 'undefined') ? 'No Sensor ID' : x[0].sensorId,\n      data: x.map((x) => x.soilMoisture),//might not need\n      borderWidth: 1,\n      fill: false,\n      borderColor: 'red'\n    })))\n\n  }\n\n  const vBatDisplay = () => {\n    if (bigArrayLoaded) {\n      setVBat(bigArray.map(x => ({\n        \"sensorId\": (typeof x[0].sensorId === 'undefined') ? 'No Sensor ID' : x[0].sensorId,\n        \"vBat\": x[x.length - 1].VBat\n      })))\n    }\n\n\n\n  }\n\n\n  var moistureData = {\n    labels: \"hip\", //fix for legend lengths\n    datasets: dataSet\n  };\n\n  var options = {\n    maintainAspectRatio: false,\n    plugins: {\n      title: {\n        display: true,\n        text: 'Soil Moisture Data'\n      }\n    },\n    scales: {\n    },\n    legend: {\n      labels: {\n        fontSize: 25,\n      },\n    },\n  }\n\nconst displayVBat = {\n  labels: vBat.map(x=> x.sensorId),\n  datasets: [\n    {\n      label: 'Battery Voltage',\n      backgroundColor: 'rgba(75,192,192,1)',\n      borderColor: 'rgba(0,0,0,1)',\n      borderWidth: 2,\n      data: vBat.map(x=> x.VBat)\n    }\n  ]\n}\n  return (\n    <div>\n      <br />\n      <br />\n      <div className='moistureGraph'>\n        <Line\n          data={moistureData}\n          height={400}\n          options={options}\n        />\n        <Bar\n          data = {displayVBat}\n          height = {400}\n          options = {options}\n          />\n\n      </div></div>\n  )\n}\n\nexport default BreakComputer"]},"metadata":{},"sourceType":"module"}