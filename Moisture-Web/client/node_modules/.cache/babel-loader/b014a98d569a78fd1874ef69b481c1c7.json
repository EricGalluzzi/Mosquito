{"ast":null,"code":"var _jsxFileName = \"/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/testFeatures/newGraphFormat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport '../App.css';\nimport WeatherUpdate from './WeatherUpdate';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, BarController, BarElement } from 'chart.js';\nimport { ProgressBar } from 'react-bootstrap';\nimport { Line, Bar } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, BarController, BarElement);\n\nconst GraphManager = chart => {\n  _s();\n\n  let [vBat, setVBat] = useState([]); //Holds Battery Voltage value for Bar chart\n\n  let [graphSet, setGraphSet] = useState([]); //Contains datasets for line graph. \n\n  let [isLoaded, setLoaded] = useState(false); //duplicate testing for dev\n\n  useEffect(() => {\n    if (chart.data.length > 0) {\n      //only render when actual data is passed in.\n      if (!isLoaded) {\n        //only render once\n        createGraphs(); //create Data Sets\n\n        vBatDisplay(); //create vBat display\n\n        setLoaded(true);\n      }\n    } //createGraphSets()\n\n  }, [chart]); //rerender when restAPI data changes on Home.js\n  //essentially just map a dataset. \n  //setGraphSet-> setGraphs \n\n  /*\n  map a graph for each after creating a a set of graph data\n  //each label equals its own date\n  //each data set has label sensor ID // could change since title could be sensor ID\n  //data - map sM.\n  \n  */\n\n  const createGraphs = () => {\n    setGraphSet(chart.data.map(x => ({\n      labels: x.entry.map(y => y.recordedAt.substr(0, 10) + \"\\n\"),\n      //add time :(((())))\n      datasets: [{\n        label: x.sensorID,\n        data: x.entry.map(y => y.sM),\n        borderWidth: 1,\n        fill: false,\n        borderColor: 'red'\n      }]\n    })));\n  };\n\n  const vBatDisplay = () => {\n    setVBat(chart.data.map(x => ({\n      \"sensorID\": typeof x.sensorID === 'undefined' ? 'No Sensor ID' : x.sensorID,\n      \"vBat\": x.entry[x.entry.length - 1].vBat //get latest battery voltage\n\n    })));\n  }; //   var moistureData = {\n  //     labels: chart?.data[0]?.entry?.map(y=> y.recordedAt), //fix for legend lengths (do line with max value)\n  //     datasets: graphSet\n  //   };\n\n\n  var options = {\n    maintainAspectRatio: false,\n    plugins: {\n      title: {\n        display: true,\n        text: 'Soil Moisture Data'\n      }\n    },\n    scales: {\n      y: {\n        beginAtZero: true\n      }\n    },\n    legend: {\n      labels: {\n        fontSize: 25\n      }\n    }\n  };\n  const displayVBat = {\n    labels: chart.data.map(x => x.sensorID),\n    datasets: [{\n      label: 'Battery Voltage',\n      borderColor: 'red',\n      borderWidth: 2,\n      data: chart.data.map(x => x.entry[x.entry.length - 1].vBat / 1000.0)\n    }]\n  };\n  graphSet.map(x => {\n    console.log(x);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"moistureGraphs\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sub chart-wrapper\",\n      style: {\n        padding: \"-10px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(WeatherUpdate, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), graphSet.length > 0 ? graphSet.map((x, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sub chart-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: x,\n        height: 400,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }, this)) : \"..loading\", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"voltageGraph\",\n      children: /*#__PURE__*/_jsxDEV(Bar, {\n        data: displayVBat,\n        height: 400,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 7\n  }, this);\n};\n\n_s(GraphManager, \"WUZKR/WxtEF4JkCIbQBmY4XT/6c=\");\n\n_c = GraphManager;\nexport default GraphManager;\n\nvar _c;\n\n$RefreshReg$(_c, \"GraphManager\");","map":{"version":3,"sources":["/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/testFeatures/newGraphFormat.js"],"names":["React","useState","useEffect","WeatherUpdate","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","BarController","BarElement","ProgressBar","Line","Bar","register","GraphManager","chart","vBat","setVBat","graphSet","setGraphSet","isLoaded","setLoaded","data","length","createGraphs","vBatDisplay","map","x","labels","entry","y","recordedAt","substr","datasets","label","sensorID","sM","borderWidth","fill","borderColor","options","maintainAspectRatio","plugins","title","display","text","scales","beginAtZero","legend","fontSize","displayVBat","console","log","padding","i"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport '../App.css';\nimport WeatherUpdate from './WeatherUpdate'\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  BarController,\n  BarElement,\n} from 'chart.js';\nimport { ProgressBar } from 'react-bootstrap';\nimport { Line, Bar } from 'react-chartjs-2';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  BarController,\n  BarElement\n);\n\n\nconst GraphManager = (chart) => {\n  let [vBat, setVBat] = useState([]); //Holds Battery Voltage value for Bar chart\n  let [graphSet, setGraphSet] = useState([]); //Contains datasets for line graph. \n\n \n  let [isLoaded, setLoaded] = useState(false); //duplicate testing for dev\n\n  useEffect(() => {\n\n\n    if (chart.data.length > 0) { //only render when actual data is passed in.\n        \n      if (!isLoaded) { //only render once\n\n      \n        createGraphs(); //create Data Sets\n        \n        vBatDisplay(); //create vBat display\n        setLoaded(true);\n\n      }\n    }\n\n    //createGraphSets()\n\n  }, [chart]) //rerender when restAPI data changes on Home.js\n\n\n  \n\n\n\n \n\n  //essentially just map a dataset. \n\n  //setGraphSet-> setGraphs \n\n  /*\nmap a graph for each after creating a a set of graph data\n\n//each label equals its own date\n//each data set has label sensor ID // could change since title could be sensor ID\n//data - map sM.\n\n\n\n  */\n const createGraphs = () => {\n     setGraphSet(chart.data.map(x=>({\n         labels: x.entry.map(y=> y.recordedAt.substr(0,10) + \"\\n\"), //add time :(((())))\n         datasets : [{\n            label : x.sensorID,\n            data: x.entry.map((y) => y.sM),\n            borderWidth: 1,\n            fill: false,\n            borderColor: 'red'\n\n         }]\n     })))\n     \n }\n\n  const vBatDisplay = () => {\n\n    setVBat(chart.data.map(x => ({\n       \"sensorID\": (typeof x.sensorID === 'undefined') ? 'No Sensor ID' : x.sensorID,\n      \"vBat\": x.entry[x.entry.length-1].vBat //get latest battery voltage\n     })))\n\n\n\n\n\n\n  }\n\n\n\n\n//   var moistureData = {\n//     labels: chart?.data[0]?.entry?.map(y=> y.recordedAt), //fix for legend lengths (do line with max value)\n//     datasets: graphSet\n//   };\n\n  var options = {\n    maintainAspectRatio: false,\n    plugins: {\n      title: {\n        display: true,\n        text: 'Soil Moisture Data'\n      }\n    },\n    scales: {\n        y: {\n          beginAtZero: true\n        }\n      },\n    legend: {\n      labels: {\n        fontSize: 25,\n      },\n    },\n  }\n\n  const displayVBat = {\n    labels: chart.data.map(x => x.sensorID),\n    datasets: [\n      {\n        label: 'Battery Voltage',\n\n        borderColor: 'red',\n        borderWidth: 2,\n        data: chart.data.map(x => (x.entry[x.entry.length-1].vBat/1000.0))\n      }\n    ]\n  }\n  \n\n  graphSet.map((x)=> {\n      \n    console.log(x)\n      \n  })\n  \n  return (\n\n      \n      <div className='moistureGraphs'>\n      <div className = \"sub chart-wrapper\" style = {{padding: \"-10px\"}}>\n    \n    <WeatherUpdate/>\n  \n    </div>\n      {graphSet.length > 0 ?  \n        graphSet.map((x,i)=> (\n        <div className = \"sub chart-wrapper\" key = {i}>\n        <Line \n          data = {x}\n          height = {400}\n          options = {options} \n\n      /></div>)) : \"..loading\"}\n        \n      \n\n      \n      \n      <div className='voltageGraph'>\n        <Bar\n          data={displayVBat}\n          height={400}\n          options={options}\n        />\n      </div>\n      </div>\n    \n  )\n}\n\nexport default GraphManager"]},"metadata":{},"sourceType":"module"}