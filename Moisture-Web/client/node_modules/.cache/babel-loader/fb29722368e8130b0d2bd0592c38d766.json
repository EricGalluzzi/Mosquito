{"ast":null,"code":"var _jsxFileName = \"/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport 'react-bootstrap';\nimport Nav from './features/navBar';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst data = {\n  labels: ['Jan', 'Mar', 'May', 'July', 'Oct'],\n  datasets: [{\n    label: 'Iphone sales',\n    data: [400, 1000, 4000, 800, 1500],\n    fill: true,\n    backgroundColor: \"#2e4355\",\n    pointBorderColor: \"#8884d8\",\n    pointBorderWidth: 5,\n    pointRadius: 8,\n    tension: 0.4\n  }]\n};\nconst options = {\n  plugins: {\n    legend: {\n      display: false\n    }\n  },\n  layout: {\n    padding: {\n      bottom: 100\n    }\n  },\n  scales: {\n    y: {\n      ticks: {\n        color: \"white\",\n        font: {\n          size: 18\n        }\n      },\n      grid: {\n        color: \"#243240\"\n      }\n    },\n    x: {\n      ticks: {\n        color: \"white\",\n        font: {\n          size: 18\n        }\n      }\n    }\n  }\n};\nconst cooperCityWeatherId = 4151824;\nconst apiKey = process.env.REACT_APP_WEATHER_KEY;\nconst WeatherApiUrl = `http://api.openweathermap.org/data/2.5/weather?id=${cooperCityWeatherId}&appid=${apiKey}`;\n\nfunction Home() {\n  _s();\n\n  //usestate of weather data, can be an array\n  //useState of soil Moisture data, can also be an array\n  const [weatherData, setWeatherData] = useState({\n    main: '',\n    weather: ''\n  });\n  const [soilMoisture, setSoilMoisture] = useState({\n    soilMoisture: ''\n  }); //API data with a promise resolve nad useEffect\n\n  useEffect(() => {\n    const fetchData = () => {\n      Promise.all([fetch(WeatherApiUrl).then(resp => resp.json()).then(weather => setWeatherData({\n        main: weather.main,\n        weather: weather.weather\n      })) //fetch('/api').then(resp => resp.json()).then(moisture => setSoilMoisture(moisture)),\n      ]);\n    };\n\n    fetchData();\n    return () => {\n      setWeatherData({}); // This worked for me\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Home\",\n    children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: data,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Home, \"lre/YQhbBkCAIMv/BgfjsQCJBWI=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/Home.js"],"names":["React","useState","useEffect","Link","Nav","Line","data","labels","datasets","label","fill","backgroundColor","pointBorderColor","pointBorderWidth","pointRadius","tension","options","plugins","legend","display","layout","padding","bottom","scales","y","ticks","color","font","size","grid","x","cooperCityWeatherId","apiKey","process","env","REACT_APP_WEATHER_KEY","WeatherApiUrl","Home","weatherData","setWeatherData","main","weather","soilMoisture","setSoilMoisture","fetchData","Promise","all","fetch","then","resp","json"],"mappings":"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","sourcesContent":["\nimport React, {useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport 'react-bootstrap';\nimport Nav from './features/navBar' ;\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { Line } from 'react-chartjs-2';\n\nconst data = {\n  labels: ['Jan', 'Mar', 'May', 'July', 'Oct'],\n  datasets: [\n    {\n      label: 'Iphone sales',\n      data: [400, 1000, 4000, 800, 1500],\n      fill: true,\n      backgroundColor:\"#2e4355\",\n      pointBorderColor:\"#8884d8\",\n      pointBorderWidth:5,\n      pointRadius:8,\n      tension: 0.4\n    },\n  ],\n};\n\nconst options = {\n  plugins:{legend:{display:false}},\n  layout:{padding:{bottom:100}},\n  scales: {\n    y:{\n      ticks:{\n        color:\"white\",\n        font:{\n          size:18\n        }\n      },\n      grid:{\n        color:\"#243240\"\n      }\n    },\n    x:{\n      ticks:{\n        color:\"white\",\n        font:{\n          size:18\n        }\n      }\n    }\n  },\n};\n\n\nconst cooperCityWeatherId = 4151824;\nconst apiKey = process.env.REACT_APP_WEATHER_KEY;\n\n\n\n\n\nconst WeatherApiUrl = `http://api.openweathermap.org/data/2.5/weather?id=${cooperCityWeatherId}&appid=${apiKey}`\n\nfunction Home(){\n    //usestate of weather data, can be an array\n    //useState of soil Moisture data, can also be an array\n    const [weatherData, setWeatherData] = useState({main: '', weather : ''});\n    const [soilMoisture, setSoilMoisture] = useState({soilMoisture: ''});\n    \n\n    \n    //API data with a promise resolve nad useEffect\n    useEffect(() => {\n        const fetchData = () =>{\n    \n            Promise.all([\n                fetch(WeatherApiUrl).then(resp => resp.json()).then(weather => setWeatherData({main : weather.main, weather : weather.weather})), \n                //fetch('/api').then(resp => resp.json()).then(moisture => setSoilMoisture(moisture)),\n            ])\n        \n        }\n       fetchData()\n       \n      \n       return () => {\n        setWeatherData({}); // This worked for me\n      };\n       \n    },[])\n    \n\n    return(\n        <div className=\"Home\">\n            <Nav />\n            <div>\n            <Line data={data} options={options}/>\n            </div>\n        </div>\n\n        \n        \n    );\n\n\n\n\n}\nexport default Home;\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}