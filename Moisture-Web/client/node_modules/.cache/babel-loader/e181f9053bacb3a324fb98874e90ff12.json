{"ast":null,"code":"var _jsxFileName = \"/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/testFeatures/newGraphFormat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, BarController, BarElement } from 'chart.js';\nimport { ProgressBar } from 'react-bootstrap';\nimport { Line, Bar } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, BarController, BarElement);\n\nconst GraphManager = chart => {\n  _s();\n\n  var _chart$data$, _chart$data$$entry;\n\n  let [vBat, setVBat] = useState([]); //Holds Battery Voltage value for Bar chart\n\n  let [graphSet, setGraphSet] = useState([]); //Contains datasets for line graph. \n\n  let [isLoaded, setLoaded] = useState(false); //duplicate testing for dev\n\n  useEffect(() => {\n    if (chart.data.length > 0) {\n      //only render when actual data is passed in.\n      if (!isLoaded) {\n        //only render once\n        createGraphs(); //create Data Sets\n\n        vBatDisplay(); //create vBat display\n\n        setLoaded(true);\n      }\n    } //createGraphSets()\n\n  }, [chart]); //rerender when restAPI data changes on Home.js\n  //essentially just map a dataset. \n  //setGraphSet-> setGraphs \n\n  /*\n  map a graph for each after creating a a set of graph data\n  //each label equals its own date\n  //each data set has label sensor ID // could change since title could be sensor ID\n  //data - map sM.\n  \n  */\n\n  const createGraphs = () => {\n    setGraphSet(chart.data.map(x => ({\n      labels: x.entry.map(y => y.recordedAt),\n      datasets: {\n        label: typeof x.sensorID === 'undefined' ? 'No Sensor ID' : x.sensorID,\n        data: x.entry.map(y => y.sM),\n        borderWidth: 1,\n        fill: false,\n        borderColor: 'red'\n      }\n    })));\n  };\n\n  const vBatDisplay = () => {\n    setVBat(chart.data.map(x => ({\n      \"sensorID\": typeof x.sensorID === 'undefined' ? 'No Sensor ID' : x.sensorID,\n      \"vBat\": x.entry[x.entry.length - 1].vBat //get latest battery voltage\n\n    })));\n  };\n\n  var moistureData = {\n    labels: chart === null || chart === void 0 ? void 0 : (_chart$data$ = chart.data[0]) === null || _chart$data$ === void 0 ? void 0 : (_chart$data$$entry = _chart$data$.entry) === null || _chart$data$$entry === void 0 ? void 0 : _chart$data$$entry.map(y => y.recordedAt),\n    //fix for legend lengths (do line with max value)\n    datasets: graphSet\n  };\n  var options = {\n    maintainAspectRatio: false,\n    plugins: {\n      title: {\n        display: true,\n        text: 'Soil Moisture Data'\n      }\n    },\n    scales: {},\n    legend: {\n      labels: {\n        fontSize: 25\n      }\n    }\n  };\n  const displayVBat = {\n    labels: chart.data.map(x => x.sensorID),\n    datasets: [{\n      label: 'Battery Voltage',\n      borderColor: 'red',\n      borderWidth: 2,\n      data: chart.data.map(x => x.entry[x.entry.length - 1].vBat / 1000.0)\n    }]\n  };\n  console.log(vBat);\n  let formatGraphs = setGraphSet.map(x => {\n    /*#__PURE__*/\n    _jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: x,\n        height: 400,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 7\n      }, this)\n    }, x.sensorID, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"moistureGraphs\",\n      children: formatGraphs.length > 0 ? formatGraphs : \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"voltageGraph\",\n      children: /*#__PURE__*/_jsxDEV(Bar, {\n        data: displayVBat,\n        height: 400,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GraphManager, \"WUZKR/WxtEF4JkCIbQBmY4XT/6c=\");\n\n_c = GraphManager;\nexport default GraphManager;\n\nvar _c;\n\n$RefreshReg$(_c, \"GraphManager\");","map":{"version":3,"sources":["/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/testFeatures/newGraphFormat.js"],"names":["React","useState","useEffect","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","BarController","BarElement","ProgressBar","Line","Bar","register","GraphManager","chart","vBat","setVBat","graphSet","setGraphSet","isLoaded","setLoaded","data","length","createGraphs","vBatDisplay","map","x","labels","entry","y","recordedAt","datasets","label","sensorID","sM","borderWidth","fill","borderColor","moistureData","options","maintainAspectRatio","plugins","title","display","text","scales","legend","fontSize","displayVBat","console","log","formatGraphs"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SACEC,KAAK,IAAIC,OADX,EAEEC,aAFF,EAGEC,WAHF,EAIEC,YAJF,EAKEC,WALF,EAMEC,KANF,EAOEC,OAPF,EAQEC,MARF,EASEC,aATF,EAUEC,UAVF,QAWO,UAXP;AAYA,SAASC,WAAT,QAA4B,iBAA5B;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,iBAA1B;;AAEAZ,OAAO,CAACa,QAAR,CACEZ,aADF,EAEEC,WAFF,EAGEC,YAHF,EAIEC,WAJF,EAKEC,KALF,EAMEC,OANF,EAOEC,MAPF,EAQEC,aARF,EASEC,UATF;;AAaA,MAAMK,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAAA;;AAC9B,MAAI,CAACC,IAAD,EAAOC,OAAP,IAAkBpB,QAAQ,CAAC,EAAD,CAA9B,CAD8B,CACM;;AACpC,MAAI,CAACqB,QAAD,EAAWC,WAAX,IAA0BtB,QAAQ,CAAC,EAAD,CAAtC,CAF8B,CAEc;;AAG5C,MAAI,CAACuB,QAAD,EAAWC,SAAX,IAAwBxB,QAAQ,CAAC,KAAD,CAApC,CAL8B,CAKe;;AAE7CC,EAAAA,SAAS,CAAC,MAAM;AAGd,QAAIiB,KAAK,CAACO,IAAN,CAAWC,MAAX,GAAoB,CAAxB,EAA2B;AAAE;AAC3B,UAAI,CAACH,QAAL,EAAe;AAAE;AAGfI,QAAAA,YAAY,GAHC,CAGG;;AAChBC,QAAAA,WAAW,GAJE,CAIE;;AACfJ,QAAAA,SAAS,CAAC,IAAD,CAAT;AAED;AACF,KAZa,CAcd;;AAED,GAhBQ,EAgBN,CAACN,KAAD,CAhBM,CAAT,CAP8B,CAuBlB;AASZ;AAEA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;;AAIC,QAAMS,YAAY,GAAG,MAAM;AACvBL,IAAAA,WAAW,CAACJ,KAAK,CAACO,IAAN,CAAWI,GAAX,CAAeC,CAAC,KAAG;AAC3BC,MAAAA,MAAM,EAAED,CAAC,CAACE,KAAF,CAAQH,GAAR,CAAYI,CAAC,IAAGA,CAAC,CAACC,UAAlB,CADmB;AAE3BC,MAAAA,QAAQ,EAAG;AACRC,QAAAA,KAAK,EAAI,OAAON,CAAC,CAACO,QAAT,KAAsB,WAAvB,GAAsC,cAAtC,GAAuDP,CAAC,CAACO,QADzD;AAERZ,QAAAA,IAAI,EAAEK,CAAC,CAACE,KAAF,CAAQH,GAAR,CAAaI,CAAD,IAAOA,CAAC,CAACK,EAArB,CAFE;AAGRC,QAAAA,WAAW,EAAE,CAHL;AAIRC,QAAAA,IAAI,EAAE,KAJE;AAKRC,QAAAA,WAAW,EAAE;AALL;AAFgB,KAAH,CAAhB,CAAD,CAAX;AAWH,GAZD;;AAcC,QAAMb,WAAW,GAAG,MAAM;AAExBR,IAAAA,OAAO,CAACF,KAAK,CAACO,IAAN,CAAWI,GAAX,CAAeC,CAAC,KAAK;AAC1B,kBAAa,OAAOA,CAAC,CAACO,QAAT,KAAsB,WAAvB,GAAsC,cAAtC,GAAuDP,CAAC,CAACO,QAD3C;AAE3B,cAAQP,CAAC,CAACE,KAAF,CAAQF,CAAC,CAACE,KAAF,CAAQN,MAAR,GAAe,CAAvB,EAA0BP,IAFP,CAEY;;AAFZ,KAAL,CAAhB,CAAD,CAAP;AAUD,GAZD;;AAiBA,MAAIuB,YAAY,GAAG;AACjBX,IAAAA,MAAM,EAAEb,KAAF,aAAEA,KAAF,uCAAEA,KAAK,CAAEO,IAAP,CAAY,CAAZ,CAAF,uEAAE,aAAgBO,KAAlB,uDAAE,mBAAuBH,GAAvB,CAA2BI,CAAC,IAAGA,CAAC,CAACC,UAAjC,CADS;AACqC;AACtDC,IAAAA,QAAQ,EAAEd;AAFO,GAAnB;AAKA,MAAIsB,OAAO,GAAG;AACZC,IAAAA,mBAAmB,EAAE,KADT;AAEZC,IAAAA,OAAO,EAAE;AACPC,MAAAA,KAAK,EAAE;AACLC,QAAAA,OAAO,EAAE,IADJ;AAELC,QAAAA,IAAI,EAAE;AAFD;AADA,KAFG;AAQZC,IAAAA,MAAM,EAAE,EARI;AAUZC,IAAAA,MAAM,EAAE;AACNnB,MAAAA,MAAM,EAAE;AACNoB,QAAAA,QAAQ,EAAE;AADJ;AADF;AAVI,GAAd;AAiBA,QAAMC,WAAW,GAAG;AAClBrB,IAAAA,MAAM,EAAEb,KAAK,CAACO,IAAN,CAAWI,GAAX,CAAeC,CAAC,IAAIA,CAAC,CAACO,QAAtB,CADU;AAElBF,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,KAAK,EAAE,iBADT;AAGEK,MAAAA,WAAW,EAAE,KAHf;AAIEF,MAAAA,WAAW,EAAE,CAJf;AAKEd,MAAAA,IAAI,EAAEP,KAAK,CAACO,IAAN,CAAWI,GAAX,CAAeC,CAAC,IAAKA,CAAC,CAACE,KAAF,CAAQF,CAAC,CAACE,KAAF,CAAQN,MAAR,GAAe,CAAvB,EAA0BP,IAA1B,GAA+B,MAApD;AALR,KADQ;AAFQ,GAApB;AAYAkC,EAAAA,OAAO,CAACC,GAAR,CAAYnC,IAAZ;AAEA,MAAIoC,YAAY,GAAGjC,WAAW,CAACO,GAAZ,CAAiBC,CAAD,IAAM;AACrC;AAAA;AAAA,6BACA,QAAC,IAAD;AACI,QAAA,IAAI,EAAIA,CADZ;AAEI,QAAA,MAAM,EAAI,GAFd;AAGI,QAAA,OAAO,EAAIa;AAHf;AAAA;AAAA;AAAA;AAAA;AADA,OAAYb,CAAC,CAACO,QAAd;AAAA;AAAA;AAAA;AAAA;AAQH,GATkB,CAAnB;AAUA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,gBACGkB,YAAY,CAAC7B,MAAb,GAAsB,CAAtB,GAA0B6B,YAA1B,GAAyC;AAD5C;AAAA;AAAA;AAAA;AAAA,YAHF,eAME;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACE,QAAC,GAAD;AACE,QAAA,IAAI,EAAEH,WADR;AAEE,QAAA,MAAM,EAAE,GAFV;AAGE,QAAA,OAAO,EAAET;AAHX;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD,CA3ID;;GAAM1B,Y;;KAAAA,Y;AA6IN,eAAeA,YAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  BarController,\n  BarElement,\n} from 'chart.js';\nimport { ProgressBar } from 'react-bootstrap';\nimport { Line, Bar } from 'react-chartjs-2';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  BarController,\n  BarElement\n);\n\n\nconst GraphManager = (chart) => {\n  let [vBat, setVBat] = useState([]); //Holds Battery Voltage value for Bar chart\n  let [graphSet, setGraphSet] = useState([]); //Contains datasets for line graph. \n  \n \n  let [isLoaded, setLoaded] = useState(false); //duplicate testing for dev\n\n  useEffect(() => {\n\n\n    if (chart.data.length > 0) { //only render when actual data is passed in.\n      if (!isLoaded) { //only render once\n\n      \n        createGraphs(); //create Data Sets\n        vBatDisplay(); //create vBat display\n        setLoaded(true);\n\n      }\n    }\n\n    //createGraphSets()\n\n  }, [chart]) //rerender when restAPI data changes on Home.js\n\n\n  \n\n\n\n \n\n  //essentially just map a dataset. \n\n  //setGraphSet-> setGraphs \n\n  /*\nmap a graph for each after creating a a set of graph data\n\n//each label equals its own date\n//each data set has label sensor ID // could change since title could be sensor ID\n//data - map sM.\n\n\n\n  */\n const createGraphs = () => {\n     setGraphSet(chart.data.map(x=>({\n         labels: x.entry.map(y=> y.recordedAt),\n         datasets : {\n            label : (typeof x.sensorID === 'undefined') ? 'No Sensor ID' : x.sensorID,\n            data: x.entry.map((y) => y.sM),\n            borderWidth: 1,\n            fill: false,\n            borderColor: 'red'\n\n         }\n     })))\n }\n\n  const vBatDisplay = () => {\n\n    setVBat(chart.data.map(x => ({\n       \"sensorID\": (typeof x.sensorID === 'undefined') ? 'No Sensor ID' : x.sensorID,\n      \"vBat\": x.entry[x.entry.length-1].vBat //get latest battery voltage\n     })))\n\n\n\n\n\n\n  }\n\n\n\n\n  var moistureData = {\n    labels: chart?.data[0]?.entry?.map(y=> y.recordedAt), //fix for legend lengths (do line with max value)\n    datasets: graphSet\n  };\n\n  var options = {\n    maintainAspectRatio: false,\n    plugins: {\n      title: {\n        display: true,\n        text: 'Soil Moisture Data'\n      }\n    },\n    scales: {\n    },\n    legend: {\n      labels: {\n        fontSize: 25,\n      },\n    },\n  }\n\n  const displayVBat = {\n    labels: chart.data.map(x => x.sensorID),\n    datasets: [\n      {\n        label: 'Battery Voltage',\n\n        borderColor: 'red',\n        borderWidth: 2,\n        data: chart.data.map(x => (x.entry[x.entry.length-1].vBat/1000.0))\n      }\n    ]\n  }\n  console.log(vBat);\n\n  let formatGraphs = setGraphSet.map((x)=> {\n      <div key = {x.sensorID} >\n      <Line \n          data = {x}\n          height = {400}\n          options = {options}\n\n      />\n      </div>\n  })\n  return (\n    <div>\n      <br />\n      <br />\n      <div className='moistureGraphs'>\n        {formatGraphs.length > 0 ? formatGraphs : \"Loading...\"}\n      </div>\n      <div className='voltageGraph'>\n        <Bar\n          data={displayVBat}\n          height={400}\n          options={options}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default GraphManager"]},"metadata":{},"sourceType":"module"}