{"ast":null,"code":"import _slicedToArray from\"/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect}from'react';import{Chart as ChartJS,CategoryScale,LinearScale,PointElement,LineElement,Title,Tooltip,Legend,BarController,BarElement}from'chart.js';import{ProgressBar}from'react-bootstrap';import{Line,Bar}from'react-chartjs-2';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";ChartJS.register(CategoryScale,LinearScale,PointElement,LineElement,Title,Tooltip,Legend,BarController,BarElement);var GraphManager=function GraphManager(chart){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),vBat=_useState2[0],setVBat=_useState2[1];//Holds Battery Voltage value for Bar chart\nvar _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),dataSet=_useState4[0],setDataSet=_useState4[1];//Contains datasets for line graph. \nvar _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),isLoaded=_useState6[0],setLoaded=_useState6[1];//duplicate testing for dev\nuseEffect(function(){if(chart.data.length>0){//only render when actual data is passed in.\nif(!isLoaded){//only render once\ncreateDataSets();//create Data Sets\nvBatDisplay();//create vBat display\nsetLoaded(true);}}//createDataSets()\n},[chart]);//rerender when restAPI data changes on Home.js\n//essentially just map a dataset. \nvar createDataSets=function createDataSets(){setDataSet(chart.data.map(function(x){return{label:typeof x.sensorID==='undefined'?'No Sensor ID':x.sensorID,data:x.entry.map(function(y){return y.sM;}),//data would require parsing through the entry component of each document.\nborderWidth:1,fill:false,borderColor:'red'};}));};var vBatDisplay=function vBatDisplay(){setVBat(chart.data.map(function(x){return{\"sensorID\":typeof x.sensorID==='undefined'?'No Sensor ID':x.sensorID,\"vBat\":x.entry[x.entry.length-1].vBat//get latest battery voltage\n};}));};var moistureData={labels:chart.data[0].entry.map(function(y){return y.recordedAt;}),//fix for legend lengths (do line with max value)\ndatasets:dataSet};var options={maintainAspectRatio:false,plugins:{title:{display:true,text:'Soil Moisture Data'}},scales:{},legend:{labels:{fontSize:25}}};var displayVBat={labels:chart.data.map(function(x){return x.sensorID;}),datasets:[{label:'Battery Voltage',borderColor:'red',borderWidth:2,data:chart.data.map(function(x){return x.entry[x.entry.length-1].vBat/1000.0;})}]};console.log(vBat);return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"div\",{className:\"moistureGraph\",children:/*#__PURE__*/_jsx(Line,{data:moistureData,height:400,options:options})}),/*#__PURE__*/_jsx(\"div\",{className:\"voltageGraph\",children:/*#__PURE__*/_jsx(Bar,{data:displayVBat,height:400,options:options})})]});};export default GraphManager;","map":{"version":3,"sources":["/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/features/graphManager.js"],"names":["React","useState","useEffect","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","BarController","BarElement","ProgressBar","Line","Bar","register","GraphManager","chart","vBat","setVBat","dataSet","setDataSet","isLoaded","setLoaded","data","length","createDataSets","vBatDisplay","map","x","label","sensorID","entry","y","sM","borderWidth","fill","borderColor","moistureData","labels","recordedAt","datasets","options","maintainAspectRatio","plugins","title","display","text","scales","legend","fontSize","displayVBat","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  BarController,\n  BarElement,\n} from 'chart.js';\nimport { ProgressBar } from 'react-bootstrap';\nimport { Line, Bar } from 'react-chartjs-2';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  BarController,\n  BarElement\n);\n\n\nconst GraphManager = (chart) => {\n  let [vBat, setVBat] = useState([]); //Holds Battery Voltage value for Bar chart\n  let [dataSet, setDataSet] = useState([]); //Contains datasets for line graph. \n  \n \n  let [isLoaded, setLoaded] = useState(false); //duplicate testing for dev\n\n  useEffect(() => {\n\n\n    if (chart.data.length > 0) { //only render when actual data is passed in.\n      if (!isLoaded) { //only render once\n\n      \n        createDataSets(); //create Data Sets\n        vBatDisplay(); //create vBat display\n        setLoaded(true);\n\n      }\n    }\n\n    //createDataSets()\n\n  }, [chart]) //rerender when restAPI data changes on Home.js\n\n\n  \n\n\n\n \n\n  //essentially just map a dataset. \n  const createDataSets = () => {\n\n\n    setDataSet(chart.data.map(x => ({\n      label: (typeof x.sensorID === 'undefined') ? 'No Sensor ID' : x.sensorID,\n      data: x.entry.map((y) => y.sM),//data would require parsing through the entry component of each document.\n      borderWidth: 1,\n      fill: false,\n      borderColor: 'red'\n    })))\n\n  }\n\n  const vBatDisplay = () => {\n\n    setVBat(chart.data.map(x => ({\n       \"sensorID\": (typeof x.sensorID === 'undefined') ? 'No Sensor ID' : x.sensorID,\n      \"vBat\": x.entry[x.entry.length-1].vBat //get latest battery voltage\n     })))\n\n\n\n\n\n\n  }\n\n\n\n\n  var moistureData = {\n    labels: chart.data[0].entry.map(y=> y.recordedAt), //fix for legend lengths (do line with max value)\n    datasets: dataSet\n  };\n\n  var options = {\n    maintainAspectRatio: false,\n    plugins: {\n      title: {\n        display: true,\n        text: 'Soil Moisture Data'\n      }\n    },\n    scales: {\n    },\n    legend: {\n      labels: {\n        fontSize: 25,\n      },\n    },\n  }\n\n  const displayVBat = {\n    labels: chart.data.map(x => x.sensorID),\n    datasets: [\n      {\n        label: 'Battery Voltage',\n\n        borderColor: 'red',\n        borderWidth: 2,\n        data: chart.data.map(x => (x.entry[x.entry.length-1].vBat/1000.0))\n      }\n    ]\n  }\n  console.log(vBat);\n  return (\n    <div>\n      <br />\n      <br />\n      <div className='moistureGraph'>\n        <Line\n          data={moistureData}\n          height={400}\n          options={options}\n        />\n      </div>\n      <div className='voltageGraph'>\n        <Bar\n          data={displayVBat}\n          height={400}\n          options={options}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default GraphManager"]},"metadata":{},"sourceType":"module"}