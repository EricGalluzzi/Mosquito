{"ast":null,"code":"var _jsxFileName = \"/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport 'react-bootstrap';\nimport Nav from './features/navBar';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cooperCityWeatherId = 4151824;\nconst apiKey = process.env.REACT_APP_WEATHER_KEY;\nconst WeatherApiUrl = `http://api.openweathermap.org/data/2.5/weather?id=${cooperCityWeatherId}&appid=${apiKey}`;\n\nfunction Home() {\n  _s();\n\n  //usestate of weather data, can be an array\n  //useState of soil Moisture data, can also be an array\n  const [weatherData, setWeatherData] = useState({\n    main: '',\n    weather: ''\n  });\n  const [soilMoisture, setSoilMoisture] = useState({\n    soilMoisture: ''\n  }); //API data with a promise resolve nad useEffect\n\n  useEffect(() => {\n    const fetchData = () => {\n      Promise.all([fetch(WeatherApiUrl).then(resp => resp.json()).then(weather => setWeatherData({\n        main: weather.main,\n        weather: weather.weather\n      })), fetch('/api').then(resp => resp.json()).then(moisture => setSoilMoisture(moisture))]);\n    };\n\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Home\",\n    children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Line, {\n      datasetIdKey: \"id\",\n      data: {\n        labels: ['Jun', 'Jul', 'Aug'],\n        datasets: [{\n          id: 1,\n          label: '',\n          data: [5, 6, 7]\n        }, {\n          id: 2,\n          label: '',\n          data: [3, 2, 1]\n        }]\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Home, \"lre/YQhbBkCAIMv/BgfjsQCJBWI=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/Home.js"],"names":["React","useState","useEffect","Link","Nav","Line","cooperCityWeatherId","apiKey","process","env","REACT_APP_WEATHER_KEY","WeatherApiUrl","Home","weatherData","setWeatherData","main","weather","soilMoisture","setSoilMoisture","fetchData","Promise","all","fetch","then","resp","json","moisture","labels","datasets","id","label","data"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAA0C,OAA1C;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAO,iBAAP;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAO,sDAAP;AACA,SAASC,IAAT,QAAqB,iBAArB;;AACA,MAAMC,mBAAmB,GAAG,OAA5B;AACA,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,qBAA3B;AAEA,MAAMC,aAAa,GAAI,qDAAoDL,mBAAoB,UAASC,MAAO,EAA/G;;AAEA,SAASK,IAAT,GAAe;AAAA;;AACX;AACA;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCb,QAAQ,CAAC;AAACc,IAAAA,IAAI,EAAE,EAAP;AAAWC,IAAAA,OAAO,EAAG;AAArB,GAAD,CAA9C;AACA,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCjB,QAAQ,CAAC;AAACgB,IAAAA,YAAY,EAAE;AAAf,GAAD,CAAhD,CAJW,CAQX;;AACAf,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMiB,SAAS,GAAG,MAAK;AAEnBC,MAAAA,OAAO,CAACC,GAAR,CAAY,CACRC,KAAK,CAACX,aAAD,CAAL,CAAqBY,IAArB,CAA0BC,IAAI,IAAIA,IAAI,CAACC,IAAL,EAAlC,EAA+CF,IAA/C,CAAoDP,OAAO,IAAIF,cAAc,CAAC;AAACC,QAAAA,IAAI,EAAGC,OAAO,CAACD,IAAhB;AAAsBC,QAAAA,OAAO,EAAGA,OAAO,CAACA;AAAxC,OAAD,CAA7E,CADQ,EAERM,KAAK,CAAC,MAAD,CAAL,CAAcC,IAAd,CAAmBC,IAAI,IAAIA,IAAI,CAACC,IAAL,EAA3B,EAAwCF,IAAxC,CAA6CG,QAAQ,IAAIR,eAAe,CAACQ,QAAD,CAAxE,CAFQ,CAAZ;AAKH,KAPD;;AAQDP,IAAAA,SAAS;AAEX,GAXQ,EAWP,EAXO,CAAT;AAaA,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,4BACI,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,IAAD;AACV,MAAA,YAAY,EAAC,IADH;AAEV,MAAA,IAAI,EAAE;AACJQ,QAAAA,MAAM,EAAE,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,CADJ;AAEJC,QAAAA,QAAQ,EAAE,CACR;AACEC,UAAAA,EAAE,EAAE,CADN;AAEEC,UAAAA,KAAK,EAAE,EAFT;AAGEC,UAAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AAHR,SADQ,EAMR;AACEF,UAAAA,EAAE,EAAE,CADN;AAEEC,UAAAA,KAAK,EAAE,EAFT;AAGEC,UAAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AAHR,SANQ;AAFN;AAFI;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA8BH;;GApDQnB,I;;KAAAA,I;AAqDT,eAAeA,IAAf","sourcesContent":["import React, {useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport 'react-bootstrap';\nimport Nav from './features/navBar' ;\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { Line } from 'react-chartjs-2';\nconst cooperCityWeatherId = 4151824;\nconst apiKey = process.env.REACT_APP_WEATHER_KEY;\n\nconst WeatherApiUrl = `http://api.openweathermap.org/data/2.5/weather?id=${cooperCityWeatherId}&appid=${apiKey}`\n\nfunction Home(){\n    //usestate of weather data, can be an array\n    //useState of soil Moisture data, can also be an array\n    const [weatherData, setWeatherData] = useState({main: '', weather : ''});\n    const [soilMoisture, setSoilMoisture] = useState({soilMoisture: ''});\n    \n\n\n    //API data with a promise resolve nad useEffect\n    useEffect(() => {\n        const fetchData = () =>{\n    \n            Promise.all([\n                fetch(WeatherApiUrl).then(resp => resp.json()).then(weather => setWeatherData({main : weather.main, weather : weather.weather})), \n                fetch('/api').then(resp => resp.json()).then(moisture => setSoilMoisture(moisture)),\n            ])\n        \n        }\n       fetchData()\n       \n    },[])\n\n    return(\n        <div className=\"Home\">\n            <Nav />\n            <Line\n  datasetIdKey='id'\n  data={{\n    labels: ['Jun', 'Jul', 'Aug'],\n    datasets: [\n      {\n        id: 1,\n        label: '',\n        data: [5, 6, 7],\n      },\n      {\n        id: 2,\n        label: '',\n        data: [3, 2, 1],\n      },\n    ],\n  }}\n/>  \n        </div>\n\n        \n        \n    );\n\n\n\n\n}\nexport default Home;\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}