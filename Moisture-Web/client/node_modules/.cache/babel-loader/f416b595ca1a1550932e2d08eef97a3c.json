{"ast":null,"code":"import _slicedToArray from\"/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect}from'react';import{Chart as ChartJS,CategoryScale,LinearScale,PointElement,LineElement,Title,Tooltip,Legend,BarController,BarElement}from'chart.js';import{ProgressBar}from'react-bootstrap';import{Line,Bar}from'react-chartjs-2';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";ChartJS.register(CategoryScale,LinearScale,PointElement,LineElement,Title,Tooltip,Legend,BarController,BarElement);var GraphManager=function GraphManager(chart){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),vBat=_useState2[0],setVBat=_useState2[1];//Holds Battery Voltage value for Bar chart\nvar _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),graphSet=_useState4[0],setGraphSet=_useState4[1];//Contains datasets for line graph. \nvar _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),isLoaded=_useState6[0],setLoaded=_useState6[1];//duplicate testing for dev\nuseEffect(function(){if(chart.data.length>0){//only render when actual data is passed in.\nif(!isLoaded){//only render once\ncreateGraphs();//create Data Sets\nvBatDisplay();//create vBat display\nsetLoaded(true);}}//createGraphSets()\n},[chart]);//rerender when restAPI data changes on Home.js\n//essentially just map a dataset. \n//setGraphSet-> setGraphs \n/*\nmap a graph for each after creating a a set of graph data\n\n//each label equals its own date\n//each data set has label sensor ID // could change since title could be sensor ID\n//data - map sM.\n\n\n\n  */var createGraphs=function createGraphs(){setGraphSet(chart.data.map(function(x){return{labels:x.entry.map(function(y){return y.recordedAt;}),datasets:{label:typeof x.sensorID==='undefined'?'No Sensor ID':x.sensorID,data:x.entry.map(function(y){return y.sM;}),borderWidth:1,fill:false,borderColor:'red'}};}));};var vBatDisplay=function vBatDisplay(){setVBat(chart.data.map(function(x){return{\"sensorID\":typeof x.sensorID==='undefined'?'No Sensor ID':x.sensorID,\"vBat\":x.entry[x.entry.length-1].vBat//get latest battery voltage\n};}));};//   var moistureData = {\n//     labels: chart?.data[0]?.entry?.map(y=> y.recordedAt), //fix for legend lengths (do line with max value)\n//     datasets: graphSet\n//   };\nvar options={maintainAspectRatio:false,plugins:{title:{display:true,text:'Soil Moisture Data'}},scales:{},legend:{labels:{fontSize:25}}};var displayVBat={labels:chart.data.map(function(x){return x.sensorID;}),datasets:[{label:'Battery Voltage',borderColor:'red',borderWidth:2,data:chart.data.map(function(x){return x.entry[x.entry.length-1].vBat/1000.0;})}]};var formatGraphs=graphSet.map(function(x){/*#__PURE__*/_jsx(Line,{data:x,height:400,options:options});});return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"div\",{className:\"moistureGraphs\",children:graphSet[0].datasets.label}),/*#__PURE__*/_jsx(\"div\",{className:\"voltageGraph\",children:/*#__PURE__*/_jsx(Bar,{data:displayVBat,height:400,options:options})})]});};export default GraphManager;","map":{"version":3,"sources":["/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/testFeatures/newGraphFormat.js"],"names":["React","useState","useEffect","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","BarController","BarElement","ProgressBar","Line","Bar","register","GraphManager","chart","vBat","setVBat","graphSet","setGraphSet","isLoaded","setLoaded","data","length","createGraphs","vBatDisplay","map","x","labels","entry","y","recordedAt","datasets","label","sensorID","sM","borderWidth","fill","borderColor","options","maintainAspectRatio","plugins","title","display","text","scales","legend","fontSize","displayVBat","formatGraphs"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  BarController,\n  BarElement,\n} from 'chart.js';\nimport { ProgressBar } from 'react-bootstrap';\nimport { Line, Bar } from 'react-chartjs-2';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  BarController,\n  BarElement\n);\n\n\nconst GraphManager = (chart) => {\n  let [vBat, setVBat] = useState([]); //Holds Battery Voltage value for Bar chart\n  let [graphSet, setGraphSet] = useState([]); //Contains datasets for line graph. \n\n \n  let [isLoaded, setLoaded] = useState(false); //duplicate testing for dev\n\n  useEffect(() => {\n\n\n    if (chart.data.length > 0) { //only render when actual data is passed in.\n        \n      if (!isLoaded) { //only render once\n\n      \n        createGraphs(); //create Data Sets\n        \n        vBatDisplay(); //create vBat display\n        setLoaded(true);\n\n      }\n    }\n\n    //createGraphSets()\n\n  }, [chart]) //rerender when restAPI data changes on Home.js\n\n\n  \n\n\n\n \n\n  //essentially just map a dataset. \n\n  //setGraphSet-> setGraphs \n\n  /*\nmap a graph for each after creating a a set of graph data\n\n//each label equals its own date\n//each data set has label sensor ID // could change since title could be sensor ID\n//data - map sM.\n\n\n\n  */\n const createGraphs = () => {\n     setGraphSet(chart.data.map(x=>({\n         labels: x.entry.map(y=> y.recordedAt),\n         datasets : {\n            label : (typeof x.sensorID === 'undefined') ? 'No Sensor ID' : x.sensorID,\n            data: x.entry.map((y) => y.sM),\n            borderWidth: 1,\n            fill: false,\n            borderColor: 'red'\n\n         }\n     })))\n     \n }\n\n  const vBatDisplay = () => {\n\n    setVBat(chart.data.map(x => ({\n       \"sensorID\": (typeof x.sensorID === 'undefined') ? 'No Sensor ID' : x.sensorID,\n      \"vBat\": x.entry[x.entry.length-1].vBat //get latest battery voltage\n     })))\n\n\n\n\n\n\n  }\n\n\n\n\n//   var moistureData = {\n//     labels: chart?.data[0]?.entry?.map(y=> y.recordedAt), //fix for legend lengths (do line with max value)\n//     datasets: graphSet\n//   };\n\n  var options = {\n    maintainAspectRatio: false,\n    plugins: {\n      title: {\n        display: true,\n        text: 'Soil Moisture Data'\n      }\n    },\n    scales: {\n    },\n    legend: {\n      labels: {\n        fontSize: 25,\n      },\n    },\n  }\n\n  const displayVBat = {\n    labels: chart.data.map(x => x.sensorID),\n    datasets: [\n      {\n        label: 'Battery Voltage',\n\n        borderColor: 'red',\n        borderWidth: 2,\n        data: chart.data.map(x => (x.entry[x.entry.length-1].vBat/1000.0))\n      }\n    ]\n  }\n  \n\n  let formatGraphs = graphSet.map((x)=> {\n      \n      <Line \n          data = {x}\n          height = {400}\n          options = {options}\n\n      />\n      \n  })\n  \n  return (\n    <div>\n      <br />\n      <br />\n      <div className='moistureGraphs'>\n          {graphSet[0].datasets.label}\n      {/* {graphSet.length > 0 ?  <Line \n          data = {graphSet[0]}\n          height = {400}\n          options = {options} \n\n      /> : \"..loading\"} */}\n        \n      </div>\n      <div className='voltageGraph'>\n        <Bar\n          data={displayVBat}\n          height={400}\n          options={options}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default GraphManager"]},"metadata":{},"sourceType":"module"}