{"ast":null,"code":"var _jsxFileName = \"/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/LineChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n\nconst LineChart = props => {\n  _s();\n\n  const [chart, setChart] = useState([]);\n  const [soilMoisture, setSoilMoisture] = useState([]);\n  useEffect(props => {\n    function fetchProps() {\n      setChart([{\n        \"_id\": \"61dcc9032a3eb901f2a4a843\",\n        \"temp\": 23.38,\n        \"humidity\": 81,\n        \"pressure\": 1020,\n        \"description\": \"broken clouds\",\n        \"weathercode\": 803,\n        \"rain\": 0,\n        \"soilMoisture\": 69,\n        \"VBat\": 100\n      }, {\n        \"_id\": \"61dcc9325640e06220ba0be4\",\n        \"temp\": 23.38,\n        \"humidity\": 81,\n        \"pressure\": 1020,\n        \"description\": \"broken clouds\",\n        \"weathercode\": 803,\n        \"rain\": 0,\n        \"soilMoisture\": 69,\n        \"VBat\": 100\n      }, {\n        \"_id\": \"61dcc936f7a210c01fd6f22a\",\n        \"temp\": 23.35,\n        \"humidity\": 80,\n        \"pressure\": 1020,\n        \"description\": \"clear sky\",\n        \"weathercode\": 800,\n        \"rain\": 0,\n        \"soilMoisture\": 69,\n        \"VBat\": 100\n      }, {\n        \"_id\": \"61dcc984fc46de8f2e7127a2\",\n        \"temp\": 23.38,\n        \"humidity\": 81,\n        \"pressure\": 1020,\n        \"description\": \"broken clouds\",\n        \"weathercode\": 803,\n        \"rain\": 0,\n        \"soilMoisture\": 69,\n        \"VBat\": 100\n      }]);\n      setSoilMoisture([22, 24, 23, 45]);\n    }\n\n    fetchProps();\n  }, []); // useEffect(() => {\n  //     const fetchData = async () =>{\n  //         /*\n  //           new rest format\n  //           weatherApi pulls from /api/weather\n  //           will pull weather array of past temperature, descriptions, humidity, etc.\n  //           lastmeasured temp\n  //           lastmeasured description\n  //           lastmeasured humidity\n  //           last measured data\n  //         */\n  //         Promise.all([\n  //           fetch(WeatherApiUrl).then((resp)=> resp.json()).then(weather => {\n  //             setChart(weather)\n  //             setTemp([...temp, weather.main.temp])\n  //           })\n  //             //fetch('/api').then(resp => resp.json()).then(moisture => setSoilMoisture(moisture)),\n  //         ]).catch((error) => {\n  //             console.log(error);\n  //           });\n  //         }\n  //     fetchData()\n  //     }, []);\n\n  console.log(\"chart\", chart);\n  console.log(\"soil\", soilMoisture);\n  console.log(\"props\", props);\n  var data = {\n    labels: chart === null || chart === void 0 ? void 0 : chart.map(x => x.description),\n    datasets: [{\n      label: chart === null || chart === void 0 ? void 0 : chart.map(x => x.temp),\n      data: chart === null || chart === void 0 ? void 0 : chart.map(x => x.temp),\n      backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(153, 102, 255, 0.2)', 'rgba(255, 159, 64, 0.2)'],\n      borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)'],\n      borderWidth: 1\n    }]\n  };\n  var moistureData = {\n    labels: chart === null || chart === void 0 ? void 0 : chart.map(x => x.weathercode),\n    datasets: [{\n      label: chart === null || chart === void 0 ? void 0 : chart.map(x => x.description),\n      data: soilMoisture,\n      backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(153, 102, 255, 0.2)', 'rgba(255, 159, 64, 0.2)'],\n      borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)'],\n      borderWidth: 1\n    }]\n  };\n  var options = {\n    maintainAspectRatio: false,\n    scales: {},\n    legend: {\n      labels: {\n        fontSize: 25\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: data,\n        height: 400,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"moistureGraph\",\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: moistureData,\n        height: 400,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 7\n  }, this);\n};\n\n_s(LineChart, \"LRWNLbCv4B4I8jmd351v3LsWXhY=\");\n\n_c = LineChart;\nexport default LineChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineChart\");","map":{"version":3,"sources":["/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/LineChart.js"],"names":["React","useState","useEffect","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Line","register","LineChart","props","chart","setChart","soilMoisture","setSoilMoisture","fetchProps","console","log","data","labels","map","x","description","datasets","label","temp","backgroundColor","borderColor","borderWidth","moistureData","weathercode","options","maintainAspectRatio","scales","legend","fontSize"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\n\nimport { Line } from 'react-chartjs-2';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\n\n\n\n\n\n\nconst LineChart = (props) => {\n    \n    const [chart, setChart] = useState([])\n  const[soilMoisture, setSoilMoisture] = useState([])\n  \n    \n    \n  useEffect((props)=>{\n    function fetchProps(){\n      setChart([{\"_id\":\"61dcc9032a3eb901f2a4a843\",\"temp\":23.38,\"humidity\":81,\"pressure\":1020,\"description\":\"broken clouds\",\"weathercode\":803,\"rain\":0,\"soilMoisture\":69,\"VBat\":100},{\"_id\":\"61dcc9325640e06220ba0be4\",\"temp\":23.38,\"humidity\":81,\"pressure\":1020,\"description\":\"broken clouds\",\"weathercode\":803,\"rain\":0,\"soilMoisture\":69,\"VBat\":100},{\"_id\":\"61dcc936f7a210c01fd6f22a\",\"temp\":23.35,\"humidity\":80,\"pressure\":1020,\"description\":\"clear sky\",\"weathercode\":800,\"rain\":0,\"soilMoisture\":69,\"VBat\":100},{\"_id\":\"61dcc984fc46de8f2e7127a2\",\"temp\":23.38,\"humidity\":81,\"pressure\":1020,\"description\":\"broken clouds\",\"weathercode\":803,\"rain\":0,\"soilMoisture\":69,\"VBat\":100}])\n      setSoilMoisture([22,24,23,45])\n    \n    \n   \n    \n    \n    }\n    \n    fetchProps()\n  }, []);\n  \n  \n    // useEffect(() => {\n    //     const fetchData = async () =>{\n    //         /*\n    //           new rest format\n    //           weatherApi pulls from /api/weather\n\n    //           will pull weather array of past temperature, descriptions, humidity, etc.\n\n    //           lastmeasured temp\n    //           lastmeasured description\n    //           lastmeasured humidity\n    //           last measured data\n              \n    //         */\n\n\n\n\n\n    //         Promise.all([\n    //           fetch(WeatherApiUrl).then((resp)=> resp.json()).then(weather => {\n                \n    //             setChart(weather)\n    //             setTemp([...temp, weather.main.temp])\n    //           })\n    //             //fetch('/api').then(resp => resp.json()).then(moisture => setSoilMoisture(moisture)),\n    //         ]).catch((error) => {\n    //             console.log(error);\n    //           });\n    //         }\n        \n    //     fetchData()\n\n\n    //     }, []);\n      \n  \n  \n    console.log(\"chart\", chart);\n    console.log(\"soil\", soilMoisture)\n    console.log(\"props\", props)\n    \n    var data = {\n      labels: chart?.map(x => x.description),\n      datasets: [{\n        label: chart?.map(x => x.temp),\n        data: chart?.map(x => x.temp),\n        backgroundColor: [\n          'rgba(255, 99, 132, 0.2)',\n          'rgba(54, 162, 235, 0.2)',\n          'rgba(255, 206, 86, 0.2)',\n          'rgba(75, 192, 192, 0.2)',\n          'rgba(153, 102, 255, 0.2)',\n          'rgba(255, 159, 64, 0.2)'\n        ],\n        borderColor: [\n          'rgba(255, 99, 132, 1)',\n          'rgba(54, 162, 235, 1)',\n          'rgba(255, 206, 86, 1)',\n          'rgba(75, 192, 192, 1)',\n          'rgba(153, 102, 255, 1)',\n          'rgba(255, 159, 64, 1)'\n        ],\n        borderWidth: 1\n      }]\n    };\n\n    var moistureData = {\n      labels: chart?.map(x => x.weathercode),\n      datasets: [{\n        label: chart?.map(x => x.description),\n        data: soilMoisture,\n        backgroundColor: [\n          'rgba(255, 99, 132, 0.2)',\n          'rgba(54, 162, 235, 0.2)',\n          'rgba(255, 206, 86, 0.2)',\n          'rgba(75, 192, 192, 0.2)',\n          'rgba(153, 102, 255, 0.2)',\n          'rgba(255, 159, 64, 0.2)'\n        ],\n        borderColor: [\n          'rgba(255, 99, 132, 1)',\n          'rgba(54, 162, 235, 1)',\n          'rgba(255, 206, 86, 1)',\n          'rgba(75, 192, 192, 1)',\n          'rgba(153, 102, 255, 1)',\n          'rgba(255, 159, 64, 1)'\n        ],\n        borderWidth: 1\n      }]\n    };\n  \n    var options = {\n      maintainAspectRatio: false,\n      scales: {\n      },\n      legend: {\n        labels: {\n          fontSize: 25,\n        },\n      },\n    }\n  \n    return (\n      <div><div>\n\n        <Line\n          data={data}\n          height={400}\n          options={options}\n  \n        />\n      </div>\n      <div className= 'moistureGraph'>\n        <Line\n        data={moistureData}\n        height = {400}\n        options = {options}\n        />\n\n      </div></div>\n    )\n  }\n  \n  export default LineChart"]},"metadata":{},"sourceType":"module"}