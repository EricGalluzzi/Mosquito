{"ast":null,"code":"var _jsxFileName = \"/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/Home.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport 'react-bootstrap';\nimport Nav from './features/navBar';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { Line } from 'react-chartjs-2';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst options = {\n  plugins: {\n    legend: {\n      display: false\n    }\n  },\n  layout: {\n    padding: {\n      bottom: 100\n    }\n  },\n  scales: {\n    y: {\n      ticks: {\n        color: \"white\",\n        font: {\n          size: 18\n        }\n      },\n      grid: {\n        color: \"#243240\"\n      }\n    },\n    x: {\n      ticks: {\n        color: \"white\",\n        font: {\n          size: 18\n        }\n      }\n    }\n  }\n};\nconst cooperCityWeatherId = 4151824;\nconst apiKey = process.env.REACT_APP_WEATHER_KEY;\nconst WeatherApiUrl = `http://api.openweathermap.org/data/2.5/weather?id=${cooperCityWeatherId}&appid=${apiKey}`;\n\nfunction Home() {\n  _s();\n\n  //usestate of weather data, can be an array\n  //useState of soil Moisture data, can also be an array\n  const [weatherData, setWeatherData] = useState({\n    main: '',\n    weather: [],\n    temp: []\n  });\n  const [soilMoisture, setSoilMoisture] = useState({\n    soilMoisture: ''\n  });\n  const [chartData, setChartData] = useState({}); //API data with a promise resolve nad useEffect\n\n  useEffect(() => {\n    const fetchData = () => {\n      Promise.all([fetch(WeatherApiUrl).then(resp => resp.json()).then(weather => setWeatherData({\n        main: weather.main,\n        weather: weather.weather,\n        temp: [...weatherData.temp, weather.main.temp]\n      })) //fetch('/api').then(resp => resp.json()).then(moisture => setSoilMoisture(moisture)),\n      ]);\n    };\n\n    setChartData({\n      labels: ['pog'],\n      datasets: [{\n        label: \"Soil Moisture\",\n        data: [69],\n        backgroundColor: [\"rgba(75, 192, 192, 0.6)\"],\n        borderWidth: 4\n      }]\n    });\n    fetchData();\n    console.log(weatherData.weather.description); //    return () => {\n    //     setWeatherData({}); // This worked for me\n    //   };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Home\",\n    children: [/*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: weatherData.weather.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Home, \"G2vQ/Fj9WwOuhxFw87CT5CxDivg=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/Home.js"],"names":["React","useState","useEffect","Link","Nav","Line","Chart","options","plugins","legend","display","layout","padding","bottom","scales","y","ticks","color","font","size","grid","x","cooperCityWeatherId","apiKey","process","env","REACT_APP_WEATHER_KEY","WeatherApiUrl","Home","weatherData","setWeatherData","main","weather","temp","soilMoisture","setSoilMoisture","chartData","setChartData","fetchData","Promise","all","fetch","then","resp","json","labels","datasets","label","data","backgroundColor","borderWidth","console","log","description"],"mappings":"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","sourcesContent":["\nimport React, {useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport 'react-bootstrap';\nimport Nav from './features/navBar' ;\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { Line } from 'react-chartjs-2';\nimport Chart from 'chart.js/auto'\n\n\n\nconst options = {\n  plugins:{legend:{display:false}},\n  layout:{padding:{bottom:100}},\n  scales: {\n    y:{\n      ticks:{\n        color:\"white\",\n        font:{\n          size:18\n        }\n      },\n      grid:{\n        color:\"#243240\"\n      }\n    },\n    x:{\n      ticks:{\n        color:\"white\",\n        font:{\n          size:18\n        }\n      }\n    }\n  },\n};\n\n\nconst cooperCityWeatherId = 4151824;\nconst apiKey = process.env.REACT_APP_WEATHER_KEY;\n\n\n\n\n\nconst WeatherApiUrl = `http://api.openweathermap.org/data/2.5/weather?id=${cooperCityWeatherId}&appid=${apiKey}`\n\nfunction Home(){\n    //usestate of weather data, can be an array\n    //useState of soil Moisture data, can also be an array\n    const [weatherData, setWeatherData] = useState({main: '', weather : [], temp: []});\n    const [soilMoisture, setSoilMoisture] = useState({soilMoisture: ''});\n    const [chartData, setChartData] = useState({})\n\n    \n    //API data with a promise resolve nad useEffect\n    useEffect(() => {\n        const fetchData = () =>{\n    \n            Promise.all([\n                fetch(WeatherApiUrl).then(resp => resp.json()).then(weather => setWeatherData({main : weather.main, weather : weather.weather, temp: [...weatherData.temp, weather.main.temp]})), \n                //fetch('/api').then(resp => resp.json()).then(moisture => setSoilMoisture(moisture)),\n            ])\n        \n        }\n        setChartData({\n            labels: ['pog'],\n          datasets: [\n            {\n              label: \"Soil Moisture\",\n              data: [69],\n              backgroundColor: [\"rgba(75, 192, 192, 0.6)\"],\n              borderWidth: 4\n            }\n          ]\n        });\n        \n       fetchData()\n       \n        console.log(weatherData.weather.description)\n    //    return () => {\n    //     setWeatherData({}); // This worked for me\n    //   };\n       \n    },[])\n    \n\n    return(\n        <div className=\"Home\">\n            <Nav />\n            <div>\n                {weatherData.weather.description}\n            {/* <Line data={chartData} options={options}/> */}\n            </div>\n        </div>\n\n        \n        \n    );\n\n\n\n\n}\nexport default Home;\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}