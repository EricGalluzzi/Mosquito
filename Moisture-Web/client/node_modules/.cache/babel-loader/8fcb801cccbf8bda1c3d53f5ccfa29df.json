{"ast":null,"code":"var _jsxFileName = \"/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/testFeatures/Alert.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport '../App.css'; // import GraphManager from './features/graphManager'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Alert() {\n  _s();\n\n  const [alert, setAlert] = useState([]); //will contain what is returned from alert- can be an array or string?\n\n  const [loading, setLoading] = useState(true); //only display page once data is loaded\n\n  const [err, setError] = useState(null); // handle errors\n\n  useEffect(() => {\n    //render website when mounted\n    const fetchData = async () => {\n      //used callback hell because await was throwing issues\n      fetch(`/alert`).then(re => {\n        if (re.ok) {\n          return re.json();\n        }\n\n        throw re;\n      }).then(data => {\n        setAlert(data);\n        console.log(data);\n      }).catch(err => {\n        console.log(err); //setError(err)\n      }).finally(() => {\n        setLoading(false);\n      });\n    };\n\n    fetchData();\n  }, []);\n  if (err) return \"error\";\n  if (loading) return \"loading\";\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"AlertData\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Alerts by Sensor: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"AlertData\",\n      children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"SensorID\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this), \"\\xA0\", /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"Risk Level Detected\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), alert.map(x => {\n        let color;\n\n        switch (x.risk) {\n          case 0:\n            color = 'green';\n            break;\n\n          case 1:\n            color = 'orange';\n            break;\n\n          case 2:\n            color = 'red';\n            break;\n        }\n\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: x.sensorID\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            style: {\n              color: color\n            },\n            children: [\"\\xA0 \", x.info]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this)]\n        }, x.sensorID, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 21\n        }, this) // <p style = {{color: color}}>{x.sensorID}: {x.info}</p>\n        ;\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Alert, \"g1GOGn4tRceoA3E0Lv2rb/GJXMk=\");\n\n_c = Alert;\nexport default Alert;\n\nvar _c;\n\n$RefreshReg$(_c, \"Alert\");","map":{"version":3,"sources":["/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/testFeatures/Alert.js"],"names":["React","useState","useEffect","Alert","alert","setAlert","loading","setLoading","err","setError","fetchData","fetch","then","re","ok","json","data","console","log","catch","finally","map","x","color","risk","sensorID","info"],"mappings":";;;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,YAAP,C,CAMA;;;;AAKA,SAASC,KAAT,GAAiB;AAAA;;AAEb,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,EAAD,CAAlC,CAFa,CAE2B;;AAExC,QAAM,CAACK,OAAD,EAAUC,UAAV,IAAwBN,QAAQ,CAAC,IAAD,CAAtC,CAJa,CAIiC;;AAC9C,QAAM,CAACO,GAAD,EAAMC,QAAN,IAAkBR,QAAQ,CAAC,IAAD,CAAhC,CALa,CAK2B;;AACxCC,EAAAA,SAAS,CAAC,MAAM;AAAE;AAEd,UAAMQ,SAAS,GAAG,YAAY;AAAE;AAE5BC,MAAAA,KAAK,CAAE,QAAF,CAAL,CAAgBC,IAAhB,CAAqBC,EAAE,IAAI;AACvB,YAAIA,EAAE,CAACC,EAAP,EAAW;AACP,iBAAOD,EAAE,CAACE,IAAH,EAAP;AACH;;AACD,cAAMF,EAAN;AACH,OALD,EAKGD,IALH,CAKQI,IAAI,IAAI;AACZX,QAAAA,QAAQ,CAACW,IAAD,CAAR;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AAEH,OATD,EASGG,KATH,CASSX,GAAG,IAAI;AACZS,QAAAA,OAAO,CAACC,GAAR,CAAYV,GAAZ,EADY,CAEZ;AACH,OAZD,EAYGY,OAZH,CAYW,MAAM;AACbb,QAAAA,UAAU,CAAC,KAAD,CAAV;AAEH,OAfD;AAkBH,KApBD;;AAsBAG,IAAAA,SAAS;AAGZ,GA3BQ,EA2BN,EA3BM,CAAT;AA8BA,MAAIF,GAAJ,EAAS,OAAO,OAAP;AACT,MAAIF,OAAJ,EAAa,OAAO,SAAP;AAEb,sBACI;AAAK,IAAA,SAAS,EAAG,WAAjB;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEQ;AAAO,MAAA,SAAS,EAAG,WAAnB;AAAA,8BACA;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,uBAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,EAKCF,KAAK,CAACiB,GAAN,CAAUC,CAAC,IAAG;AACZ,YAAIC,KAAJ;;AACA,gBAAOD,CAAC,CAACE,IAAT;AACC,eAAK,CAAL;AAAQD,YAAAA,KAAK,GAAG,OAAR;AAAiB;;AACzB,eAAK,CAAL;AAAQA,YAAAA,KAAK,GAAG,QAAR;AAAiB;;AACzB,eAAK,CAAL;AAAQA,YAAAA,KAAK,GAAG,KAAR;AAAe;AAHxB;;AAKA,4BACC;AAAA,kCACI;AAAA,sBAAKD,CAAC,CAACG;AAAP;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAI,YAAA,KAAK,EAAI;AAACF,cAAAA,KAAK,EAAEA;AAAR,aAAb;AAAA,gCAAqCD,CAAC,CAACI,IAAvC;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ;AAAA,WAAWJ,CAAC,CAACG,QAAb;AAAA;AAAA;AAAA;AAAA,gBADD,CAKC;AALD;AAQN,OAfI,CALD;AAAA;AAAA;AAAA;AAAA;AAAA,YAFR;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA8BH;;GArEQtB,K;;KAAAA,K;AAsET,eAAeA,KAAf","sourcesContent":["\nimport React, { useState, useEffect } from 'react';\nimport '../App.css';\n\n\n\n\n\n// import GraphManager from './features/graphManager'\n\n\n\n\nfunction Alert() {\n \n    const [alert, setAlert] = useState([]); //will contain what is returned from alert- can be an array or string?\n\n    const [loading, setLoading] = useState(true); //only display page once data is loaded\n    const [err, setError] = useState(null); // handle errors\n    useEffect(() => { //render website when mounted\n\n        const fetchData = async () => { //used callback hell because await was throwing issues\n\n            fetch(`/alert`).then(re => {\n                if (re.ok) {\n                    return re.json()\n                }\n                throw re\n            }).then(data => {\n                setAlert(data)\n                console.log(data)\n\n            }).catch(err => {\n                console.log(err)\n                //setError(err)\n            }).finally(() => {\n                setLoading(false);\n\n            })\n\n\n        }\n       \n        fetchData()\n\n\n    }, []) \n\n    \n    if (err) return \"error\";\n    if (loading) return \"loading\";\n\n    return (\n        <div className = \"AlertData\">\n            <h1>Alerts by Sensor: </h1>\n                <table className = \"AlertData\">\n                <tr>\n                    <th>SensorID</th>&nbsp;\n                    <th>Risk Level Detected</th>\n                </tr>\n                {alert.map(x=> {\n                   let color;\n                   switch(x.risk){\n                    case 0: color = 'green'; break;\n                    case 1: color = 'orange';break;\n                    case 2: color = 'red'; break;\n                   }\n                   return  (\n                    <tr key = {x.sensorID}>\n                        <td>{x.sensorID}</td>\n                        <td style = {{color: color}}>&nbsp; {x.info}</td>\n                    </tr>\n                    // <p style = {{color: color}}>{x.sensorID}: {x.info}</p>\n                    \n                )\n            })\n        }\n        </table>\n                \n\n        </div>)\n\n}\nexport default Alert;\n"]},"metadata":{},"sourceType":"module"}