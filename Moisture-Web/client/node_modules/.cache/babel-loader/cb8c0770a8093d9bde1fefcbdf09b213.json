{"ast":null,"code":"import _slicedToArray from\"/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState,useEffect}from'react';import{Chart as ChartJS,CategoryScale,LinearScale,PointElement,LineElement,Title,Tooltip,Legend}from'chart.js';import{Line}from'react-chartjs-2';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";ChartJS.register(CategoryScale,LinearScale,PointElement,LineElement,Title,Tooltip,Legend);var LineChart=function LineChart(props){//console.log(props)\nvar _useState=useState([]),_useState2=_slicedToArray(_useState,2),chart=_useState2[0],setChart=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),soilMoisture=_useState4[0],setSoilMoisture=_useState4[1];useEffect(function(err,props){function fetchProps(){setChart(props);setSoilMoisture(props.map(function(x){return x.soilMoisture;}));}fetchProps();},[]);// useEffect(() => {\n//     const fetchData = async () =>{\n//         /*\n//           new rest format\n//           weatherApi pulls from /api/weather\n//           will pull weather array of past temperature, descriptions, humidity, etc.\n//           lastmeasured temp\n//           lastmeasured description\n//           lastmeasured humidity\n//           last measured data\n//         */\n//         Promise.all([\n//           fetch(WeatherApiUrl).then((resp)=> resp.json()).then(weather => {\n//             setChart(weather)\n//             setTemp([...temp, weather.main.temp])\n//           })\n//             //fetch('/api').then(resp => resp.json()).then(moisture => setSoilMoisture(moisture)),\n//         ]).catch((error) => {\n//             console.log(error);\n//           });\n//         }\n//     fetchData()\n//     }, []);\n//console.log(\"chart\", chart);\nvar data={labels:chart===null||chart===void 0?void 0:chart.map(function(x){return x.description;}),datasets:[{label:chart===null||chart===void 0?void 0:chart.map(function(x){return x.expirationSet;}),data:chart===null||chart===void 0?void 0:chart.map(function(x){return x.temp;}),backgroundColor:['rgba(255, 99, 132, 0.2)','rgba(54, 162, 235, 0.2)','rgba(255, 206, 86, 0.2)','rgba(75, 192, 192, 0.2)','rgba(153, 102, 255, 0.2)','rgba(255, 159, 64, 0.2)'],borderColor:['rgba(255, 99, 132, 1)','rgba(54, 162, 235, 1)','rgba(255, 206, 86, 1)','rgba(75, 192, 192, 1)','rgba(153, 102, 255, 1)','rgba(255, 159, 64, 1)'],borderWidth:1}]};var moistureData={labels:chart===null||chart===void 0?void 0:chart.map(function(x){return x.expirationSet;}),datasets:[{label:chart===null||chart===void 0?void 0:chart.map(function(x){return x.description;}),data:soilMoisture,backgroundColor:['rgba(255, 99, 132, 0.2)','rgba(54, 162, 235, 0.2)','rgba(255, 206, 86, 0.2)','rgba(75, 192, 192, 0.2)','rgba(153, 102, 255, 0.2)','rgba(255, 159, 64, 0.2)'],borderColor:['rgba(255, 99, 132, 1)','rgba(54, 162, 235, 1)','rgba(255, 206, 86, 1)','rgba(75, 192, 192, 1)','rgba(153, 102, 255, 1)','rgba(255, 159, 64, 1)'],borderWidth:1}]};var options={maintainAspectRatio:false,scales:{},legend:{labels:{fontSize:25}}};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(Line,{data:data,height:400,options:options})}),/*#__PURE__*/_jsx(\"div\",{className:\"moistureGraph\",children:/*#__PURE__*/_jsx(Line,{data:moistureData,height:400,options:options})})]});};export default LineChart;","map":{"version":3,"sources":["/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/LineChart.js"],"names":["React","useState","useEffect","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Line","register","LineChart","props","chart","setChart","soilMoisture","setSoilMoisture","err","fetchProps","map","x","data","labels","description","datasets","label","expirationSet","temp","backgroundColor","borderColor","borderWidth","moistureData","options","maintainAspectRatio","scales","legend","fontSize"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\n\nimport { Line } from 'react-chartjs-2';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\n\n\n\n\n\n\nconst LineChart = (props) => {\n    //console.log(props)\n    const [chart, setChart] = useState([])\n  const[soilMoisture, setSoilMoisture] = useState([])\n    \n    \n  useEffect((err, props)=>{\n    function fetchProps(){\n    setChart(props);\n    \n    setSoilMoisture(props.map(x=> x.soilMoisture))\n   \n    \n    \n    }\n    \n    fetchProps()\n  }, []);\n  \n  \n    // useEffect(() => {\n    //     const fetchData = async () =>{\n    //         /*\n    //           new rest format\n    //           weatherApi pulls from /api/weather\n\n    //           will pull weather array of past temperature, descriptions, humidity, etc.\n\n    //           lastmeasured temp\n    //           lastmeasured description\n    //           lastmeasured humidity\n    //           last measured data\n              \n    //         */\n\n\n\n\n\n    //         Promise.all([\n    //           fetch(WeatherApiUrl).then((resp)=> resp.json()).then(weather => {\n                \n    //             setChart(weather)\n    //             setTemp([...temp, weather.main.temp])\n    //           })\n    //             //fetch('/api').then(resp => resp.json()).then(moisture => setSoilMoisture(moisture)),\n    //         ]).catch((error) => {\n    //             console.log(error);\n    //           });\n    //         }\n        \n    //     fetchData()\n\n\n    //     }, []);\n      \n  \n  \n    //console.log(\"chart\", chart);\n    \n    var data = {\n      labels: chart?.map(x => x.description),\n      datasets: [{\n        label: chart?.map(x => x.expirationSet),\n        data: chart?.map(x => x.temp),\n        backgroundColor: [\n          'rgba(255, 99, 132, 0.2)',\n          'rgba(54, 162, 235, 0.2)',\n          'rgba(255, 206, 86, 0.2)',\n          'rgba(75, 192, 192, 0.2)',\n          'rgba(153, 102, 255, 0.2)',\n          'rgba(255, 159, 64, 0.2)'\n        ],\n        borderColor: [\n          'rgba(255, 99, 132, 1)',\n          'rgba(54, 162, 235, 1)',\n          'rgba(255, 206, 86, 1)',\n          'rgba(75, 192, 192, 1)',\n          'rgba(153, 102, 255, 1)',\n          'rgba(255, 159, 64, 1)'\n        ],\n        borderWidth: 1\n      }]\n    };\n\n    var moistureData = {\n      labels: chart?.map(x => x.expirationSet),\n      datasets: [{\n        label: chart?.map(x => x.description),\n        data: soilMoisture,\n        backgroundColor: [\n          'rgba(255, 99, 132, 0.2)',\n          'rgba(54, 162, 235, 0.2)',\n          'rgba(255, 206, 86, 0.2)',\n          'rgba(75, 192, 192, 0.2)',\n          'rgba(153, 102, 255, 0.2)',\n          'rgba(255, 159, 64, 0.2)'\n        ],\n        borderColor: [\n          'rgba(255, 99, 132, 1)',\n          'rgba(54, 162, 235, 1)',\n          'rgba(255, 206, 86, 1)',\n          'rgba(75, 192, 192, 1)',\n          'rgba(153, 102, 255, 1)',\n          'rgba(255, 159, 64, 1)'\n        ],\n        borderWidth: 1\n      }]\n    };\n  \n    var options = {\n      maintainAspectRatio: false,\n      scales: {\n      },\n      legend: {\n        labels: {\n          fontSize: 25,\n        },\n      },\n    }\n  \n    return (\n      <div><div>\n\n        <Line\n          data={data}\n          height={400}\n          options={options}\n  \n        />\n      </div>\n      <div className= 'moistureGraph'>\n        <Line\n        data={moistureData}\n        height = {400}\n        options = {options}\n        />\n\n      </div></div>\n    )\n  }\n  \n  export default LineChart"]},"metadata":{},"sourceType":"module"}