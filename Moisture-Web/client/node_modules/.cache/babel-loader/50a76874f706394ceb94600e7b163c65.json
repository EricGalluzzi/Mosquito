{"ast":null,"code":"var _jsxFileName = \"/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/testFeatures/BreakComputer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, BarController, BarElement } from 'chart.js';\nimport { ProgressBar } from 'react-bootstrap';\nimport { Line, Bar } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, BarController, BarElement);\n\nconst BreakComputer = chart => {\n  _s();\n\n  let [vBat, setVBat] = useState([]); //format, array of object ID and vBat\n\n  let [dataSet, setDataSet] = useState([]);\n  let [bigArray, setBigArray] = useState([]);\n  let [bigArrayLoaded, setBigArrayLoaded] = useState(false);\n  let [isLoaded, setLoaded] = useState(false); //duplicate testing for dev\n\n  useEffect(() => {\n    if (chart.data.length > 0) {\n      if (!isLoaded) {\n        initializeBigArray();\n        createDataSets();\n        vBatDisplay();\n        setLoaded(true);\n      }\n    } //createDataSets()\n\n  }, [chart]);\n\n  const initializeBigArray = () => {\n    let copy = bigArray;\n    chart.data.map(x => {\n      x.entry.map(y => {\n        let exists = findIfIdExists(y.sensorId, copy);\n\n        if (exists == -1) {\n          copy.push([y]);\n        } else {\n          // var valueArr = copy[exists].map((item)=> item.expirationSet );\n          // if(!valueArr.some((item, idx)=> item == y.expirationSet )) \n          copy[exists].push(y); //delete duplicates because initializeBigArray is called twice\n        }\n      });\n    });\n    setBigArray(copy);\n    setBigArrayLoaded(true); // if this causes a remound we need a way to stop duplicates. \n  };\n\n  const findIfIdExists = (y, copy) => {\n    for (let i = 0; i < copy.length; i++) {\n      let exists = copy[i].find(entries => entries.sensorId == y); //look into first element\n\n      if (exists != undefined) return i;\n    }\n\n    return -1;\n  }; //essentially just map a dataset. \n\n\n  const createDataSets = () => {\n    setDataSet(bigArray.map((x, i) => ({\n      label: typeof x[0].sensorId === 'undefined' ? 'No Sensor ID' : x[0].sensorId,\n      data: x.map(x => x.soilMoisture),\n      //might not need\n      borderWidth: 1,\n      fill: false,\n      borderColor: 'red'\n    })));\n  };\n\n  const vBatDisplay = () => {\n    setVBat(bigArray.map(x => ({\n      \"sensorId\": typeof x[0].sensorId === 'undefined' ? 'No Sensor ID' : x[0].sensorId,\n      \"vBat\": x[x.length - 1].VBat //see if this value is anything\n\n    })));\n  };\n\n  var moistureData = {\n    labels: \"hip\",\n    //fix for legend lengths\n    datasets: dataSet\n  };\n  var options = {\n    maintainAspectRatio: false,\n    plugins: {\n      title: {\n        display: true,\n        text: 'Soil Moisture Data'\n      }\n    },\n    scales: {},\n    legend: {\n      labels: {\n        fontSize: 25\n      }\n    }\n  };\n  const displayVBat = {\n    labels: vBat.map(x => x.sensorId),\n    datasets: [{\n      label: 'Battery Voltage',\n      borderColor: 'red',\n      borderWidth: 2,\n      data: vBat.map(x => x.vBat)\n    }]\n  };\n  console.log(vBat);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"moistureGraph\",\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: moistureData,\n        height: 400,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"voltageGraph\",\n      children: /*#__PURE__*/_jsxDEV(Bar, {\n        data: displayVBat,\n        height: 400,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BreakComputer, \"nj//aGU7dS07SE4kEaip9CvVSCI=\");\n\n_c = BreakComputer;\nexport default BreakComputer;\n\nvar _c;\n\n$RefreshReg$(_c, \"BreakComputer\");","map":{"version":3,"sources":["/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/testFeatures/BreakComputer.js"],"names":["React","useState","useEffect","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","BarController","BarElement","ProgressBar","Line","Bar","register","BreakComputer","chart","vBat","setVBat","dataSet","setDataSet","bigArray","setBigArray","bigArrayLoaded","setBigArrayLoaded","isLoaded","setLoaded","data","length","initializeBigArray","createDataSets","vBatDisplay","copy","map","x","entry","y","exists","findIfIdExists","sensorId","push","i","find","entries","undefined","label","soilMoisture","borderWidth","fill","borderColor","VBat","moistureData","labels","datasets","options","maintainAspectRatio","plugins","title","display","text","scales","legend","fontSize","displayVBat","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  BarController,\n  BarElement,\n} from 'chart.js';\nimport { ProgressBar } from 'react-bootstrap';\nimport { Line, Bar } from 'react-chartjs-2';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  BarController,\n  BarElement\n);\n\n\nconst BreakComputer = (chart) => {\n  let [vBat, setVBat] = useState([]); //format, array of object ID and vBat\n  let [dataSet, setDataSet] = useState([]);\n  let [bigArray, setBigArray] = useState([]);\n  let [bigArrayLoaded, setBigArrayLoaded] = useState(false);\n  let [isLoaded, setLoaded] = useState(false); //duplicate testing for dev\n\n  useEffect(() => {\n\n\n    if (chart.data.length > 0) {\n      if (!isLoaded) {\n\n        initializeBigArray();\n        createDataSets();\n        vBatDisplay();\n        setLoaded(true);\n\n      }\n    }\n\n    //createDataSets()\n\n  }, [chart])\n\n\n  const initializeBigArray = () => {\n\n    let copy = bigArray;\n\n    chart.data.map(x => {\n\n      x.entry.map(y => {\n\n        let exists = findIfIdExists(y.sensorId, copy);\n        if (exists == -1) {\n          copy.push([y]);\n        }\n        else {\n\n          // var valueArr = copy[exists].map((item)=> item.expirationSet );\n          // if(!valueArr.some((item, idx)=> item == y.expirationSet )) \n          copy[exists].push(y); //delete duplicates because initializeBigArray is called twice\n\n\n        }\n      })\n\n\n\n\n    })\n    setBigArray(copy);\n    setBigArrayLoaded(true); // if this causes a remound we need a way to stop duplicates. \n  }\n\n  const findIfIdExists = (y, copy) => {\n    for (let i = 0; i < copy.length; i++) {\n\n      let exists = copy[i].find(entries => entries.sensorId == y); //look into first element\n\n\n      if (exists != undefined) return i;\n\n\n\n    }\n\n    return -1;\n  }\n\n  //essentially just map a dataset. \n  const createDataSets = () => {\n\n\n    setDataSet(bigArray.map((x, i) => ({\n      label: (typeof x[0].sensorId === 'undefined') ? 'No Sensor ID' : x[0].sensorId,\n      data: x.map((x) => x.soilMoisture),//might not need\n      borderWidth: 1,\n      fill: false,\n      borderColor: 'red'\n    })))\n\n  }\n\n  const vBatDisplay = () => {\n\n    setVBat(bigArray.map(x => ({\n      \"sensorId\": (typeof x[0].sensorId === 'undefined') ? 'No Sensor ID' : x[0].sensorId,\n      \"vBat\": x[x.length - 1].VBat //see if this value is anything\n    })))\n\n\n\n\n\n\n  }\n\n\n\n\n  var moistureData = {\n    labels: \"hip\", //fix for legend lengths\n    datasets: dataSet\n  };\n\n  var options = {\n    maintainAspectRatio: false,\n    plugins: {\n      title: {\n        display: true,\n        text: 'Soil Moisture Data'\n      }\n    },\n    scales: {\n    },\n    legend: {\n      labels: {\n        fontSize: 25,\n      },\n    },\n  }\n\n  const displayVBat = {\n    labels: vBat.map(x => x.sensorId),\n    datasets: [\n      {\n        label: 'Battery Voltage',\n\n        borderColor: 'red',\n        borderWidth: 2,\n        data: vBat.map(x => x.vBat)\n      }\n    ]\n  }\n  console.log(vBat);\n  return (\n    <div>\n      <br />\n      <br />\n      <div className='moistureGraph'>\n        <Line\n          data={moistureData}\n          height={400}\n          options={options}\n        />\n      </div>\n      <div className='voltageGraph'>\n        <Bar\n          data={displayVBat}\n          height={400}\n          options={options}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default BreakComputer"]},"metadata":{},"sourceType":"module"}