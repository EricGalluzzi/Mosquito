{"ast":null,"code":"var _jsxFileName = \"/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/LineChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nconst cooperCityWeatherId = 4151824;\nconst apiKey = process.env.REACT_APP_WEATHER_KEY;\nconst WeatherApiUrl = `http://api.openweathermap.org/data/2.5/weather?id=${cooperCityWeatherId}&appid=${apiKey}`;\n\nconst LineChart = () => {\n  _s();\n\n  const [chart, setChart] = useState({});\n  const [graph, setGraph] = useState({});\n  const [temp, setTemp] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      Promise.all([fetch(WeatherApiUrl).then(resp => resp.json()).then(weather => {\n        setChart(weather);\n        setTemp([...temp, weather.main.temp]);\n        data();\n      }) //fetch('/api').then(resp => resp.json()).then(moisture => setSoilMoisture(moisture)),\n      ]).catch(error => {\n        console.log(error);\n      });\n    };\n\n    fetchData();\n  }, []);\n  console.log(\"chart\", chart);\n\n  const data = () => {\n    var _chart$weather, _chart$weather2;\n\n    setGraph({\n      labels: chart === null || chart === void 0 ? void 0 : (_chart$weather = chart.weather) === null || _chart$weather === void 0 ? void 0 : _chart$weather.map(x => x.description),\n      datasets: [{\n        label: `${chart === null || chart === void 0 ? void 0 : (_chart$weather2 = chart.weather) === null || _chart$weather2 === void 0 ? void 0 : _chart$weather2.length}`,\n        data: temp,\n        backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(153, 102, 255, 0.2)', 'rgba(255, 159, 64, 0.2)'],\n        borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)'],\n        borderWidth: 1\n      }]\n    });\n  };\n\n  var options = {\n    maintainAspectRatio: false,\n    scales: {},\n    legend: {\n      labels: {\n        fontSize: 25\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: graph,\n      height: 400,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 7\n  }, this);\n};\n\n_s(LineChart, \"xb7xmzjhQiQAKw2EviVDFj/oEak=\");\n\n_c = LineChart;\nexport default LineChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineChart\");","map":{"version":3,"sources":["/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/LineChart.js"],"names":["React","useState","useEffect","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Line","register","cooperCityWeatherId","apiKey","process","env","REACT_APP_WEATHER_KEY","WeatherApiUrl","LineChart","chart","setChart","graph","setGraph","temp","setTemp","fetchData","Promise","all","fetch","then","resp","json","weather","main","data","catch","error","console","log","labels","map","x","description","datasets","label","length","backgroundColor","borderColor","borderWidth","options","maintainAspectRatio","scales","legend","fontSize"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\n\nimport { Line } from 'react-chartjs-2';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\nconst cooperCityWeatherId = 4151824;\nconst apiKey = process.env.REACT_APP_WEATHER_KEY;\n\n\n\n\n\nconst WeatherApiUrl = `http://api.openweathermap.org/data/2.5/weather?id=${cooperCityWeatherId}&appid=${apiKey}`\n\nconst LineChart = () => {\n    const [chart, setChart] = useState({})\n    const [graph, setGraph] = useState({})\n    const [temp, setTemp] = useState([])\n  \n  \n  \n    useEffect(() => {\n        const fetchData = async () =>{\n            \n            Promise.all([\n              fetch(WeatherApiUrl).then((resp)=> resp.json()).then(weather => {\n                \n                setChart(weather)\n                setTemp([...temp, weather.main.temp])\n                data()\n              })\n                //fetch('/api').then(resp => resp.json()).then(moisture => setSoilMoisture(moisture)),\n            ]).catch((error) => {\n                console.log(error);\n              });\n            }\n        \n        fetchData()\n\n\n        }, []);\n      \n        \n          \n      \n  \n    console.log(\"chart\", chart);\n    \n    const data = () => {\n      setGraph({\n      labels: chart?.weather?.map(x => x.description),\n      datasets: [{\n        label: `${chart?.weather?.length}`,\n        data: temp,\n        backgroundColor: [\n          'rgba(255, 99, 132, 0.2)',\n          'rgba(54, 162, 235, 0.2)',\n          'rgba(255, 206, 86, 0.2)',\n          'rgba(75, 192, 192, 0.2)',\n          'rgba(153, 102, 255, 0.2)',\n          'rgba(255, 159, 64, 0.2)'\n        ],\n        borderColor: [\n          'rgba(255, 99, 132, 1)',\n          'rgba(54, 162, 235, 1)',\n          'rgba(255, 206, 86, 1)',\n          'rgba(75, 192, 192, 1)',\n          'rgba(153, 102, 255, 1)',\n          'rgba(255, 159, 64, 1)'\n        ],\n        borderWidth: 1\n      }]})}\n    \n  \n    var options = {\n      maintainAspectRatio: false,\n      scales: {\n      },\n      legend: {\n        labels: {\n          fontSize: 25,\n        },\n      },\n    }\n  \n    return (\n      <div>\n        <Line\n          data={graph}\n          height={400}\n          options={options}\n  \n        />\n      </div>\n    )\n  }\n  \n  export default LineChart"]},"metadata":{},"sourceType":"module"}