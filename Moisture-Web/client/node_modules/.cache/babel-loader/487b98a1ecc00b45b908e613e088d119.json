{"ast":null,"code":"var _jsxFileName = \"/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/testFeatures/LineChartTest.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport { ProgressBar } from 'react-bootstrap';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n\nconst LineChartTest = chart => {\n  _s();\n\n  let [vBat, setVBat] = useState(0);\n  let [dataSet, setDataSet] = useState([]);\n  useEffect(() => {\n    var _chart$data, _chart$data$slice$pop;\n\n    setVBat(chart === null || chart === void 0 ? void 0 : (_chart$data = chart.data) === null || _chart$data === void 0 ? void 0 : (_chart$data$slice$pop = _chart$data.slice(-1).pop()) === null || _chart$data$slice$pop === void 0 ? void 0 : _chart$data$slice$pop.VBat); //some reason would'nt let me access vBat from final index like a normal person\n\n    createDataSets();\n  }, [chart]); //Rerenders when chart updates. Originally, vBat would remain unchanged since its state would never change. By passing the prop as an argument, the page renders with the asynchronous passing of chart (chart was passed through an async array)\n  //essentially just map a dataset. \n\n  const createDataSets = () => {\n    var _chart$data$, _chart$data$$soilMois;\n\n    console.log(chart === null || chart === void 0 ? void 0 : (_chart$data$ = chart.data[0]) === null || _chart$data$ === void 0 ? void 0 : (_chart$data$$soilMois = _chart$data$.soilMoisture[0]) === null || _chart$data$$soilMois === void 0 ? void 0 : _chart$data$$soilMois.map(x => x));\n\n    for (var i = 0; i < (chart === null || chart === void 0 ? void 0 : (_chart$data$2 = chart.data[0]) === null || _chart$data$2 === void 0 ? void 0 : (_chart$data$2$soilMoi = _chart$data$2.soilMoisture) === null || _chart$data$2$soilMoi === void 0 ? void 0 : _chart$data$2$soilMoi.length); i++) {\n      var _chart$data$2, _chart$data$2$soilMoi;\n\n      setDataSet(dataSet => [...dataSet, {\n        label: 'Soil Moisture',\n        data: [0],\n        borderWidth: 1,\n        fill: false,\n        borderColor: 'green'\n      }]);\n    }\n  };\n\n  var moistureData = {\n    labels: chart === null || chart === void 0 ? void 0 : chart.data.map(x => String(x.expirationSet).substring(0, 10)),\n    datasets: dataSet\n  };\n  var options = {\n    maintainAspectRatio: false,\n    scales: {},\n    legend: {\n      labels: {\n        fontSize: 25\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"moistureGraph\",\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: moistureData,\n        height: 400,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 7\n  }, this);\n};\n\n_s(LineChartTest, \"7UCPGsKxgB8P5Mf7F5mhK01y6fk=\");\n\n_c = LineChartTest;\nexport default LineChartTest;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineChartTest\");","map":{"version":3,"sources":["/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/testFeatures/LineChartTest.js"],"names":["React","useState","useEffect","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","ProgressBar","Line","register","LineChartTest","chart","vBat","setVBat","dataSet","setDataSet","data","slice","pop","VBat","createDataSets","console","log","soilMoisture","map","x","i","length","label","borderWidth","fill","borderColor","moistureData","labels","String","expirationSet","substring","datasets","options","maintainAspectRatio","scales","legend","fontSize"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { ProgressBar } from 'react-bootstrap';\nimport { Line } from 'react-chartjs-2';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\n\nconst LineChartTest = (chart) => {\n    let [vBat, setVBat] = useState(0)\n    let [dataSet, setDataSet] = useState([])\n    useEffect(() => {\n      setVBat(chart ?.data ?.slice(-1).pop() ?.VBat) //some reason would'nt let me access vBat from final index like a normal person\n      createDataSets()\n    }, [chart]) //Rerenders when chart updates. Originally, vBat would remain unchanged since its state would never change. By passing the prop as an argument, the page renders with the asynchronous passing of chart (chart was passed through an async array)\n  \n  \n  \n  //essentially just map a dataset. \n\n  const createDataSets =() =>{\n    console.log(chart?.data[0]?.soilMoisture[0]?.map(x=>x))\n    for(var i = 0; i<chart?.data[0]?.soilMoisture?.length; i++){\n        setDataSet(dataSet=> [...dataSet, {\n        label: 'Soil Moisture',\n        data: [0],\n        borderWidth: 1,\n        fill: false,\n        borderColor: 'green'\n    }])\n    }\n  }\n  \n  \n  \n  \n    \n    var moistureData = {\n      labels: chart ?.data.map(x => String(x.expirationSet).substring(0, 10)),\n      datasets: dataSet\n    };\n  \n    var options = {\n      maintainAspectRatio: false,\n      scales: {\n      },\n      legend: {\n        labels: {\n          fontSize: 25,\n        },\n      },\n    }\n  \n  \n    return (\n      <div>\n        <br />\n        <br />\n        <div className='moistureGraph'>\n          <Line\n            data={moistureData}\n            height={400}\n            options={options}\n          />\n  \n        </div></div>\n    )\n  }\n  \n  export default LineChartTest"]},"metadata":{},"sourceType":"module"}