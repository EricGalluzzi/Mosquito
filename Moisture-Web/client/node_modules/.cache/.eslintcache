[{"/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/index.js":"1","/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/App.js":"2","/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/reportWebVitals.js":"3","/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/Home.js":"4","/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/features/navBar.js":"5","/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/testFeatures/LineChartTest.js":"6","/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/testFeatures/BreakComputer.js":"7","/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/features/graphManager.js":"8","/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/testFeatures/reFactorV2.js":"9","/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/features/newGraphFormat.js":"10","/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/features/WeatherUpdate.js":"11","/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/testFeatures/Alert.js":"12"},{"size":462,"mtime":1641577743256,"results":"13","hashOfConfig":"14"},{"size":461,"mtime":1641579104440,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1641575237660,"results":"16","hashOfConfig":"14"},{"size":1813,"mtime":1645668713211,"results":"17","hashOfConfig":"14"},{"size":653,"mtime":1644242255796,"results":"18","hashOfConfig":"14"},{"size":2063,"mtime":1642909419539,"results":"19","hashOfConfig":"14"},{"size":3481,"mtime":1643560047957,"results":"20","hashOfConfig":"14"},{"size":2854,"mtime":1644242734505,"results":"21","hashOfConfig":"14"},{"size":2606,"mtime":1643686032934,"results":"22","hashOfConfig":"14"},{"size":3758,"mtime":1645668714467,"results":"23","hashOfConfig":"14"},{"size":4214,"mtime":1646053080929,"results":"24","hashOfConfig":"14"},{"size":2128,"mtime":1645668714623,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"8efvki",{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":4,"source":null},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},"/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/index.js",[],["59","60"],"/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/App.js",["61"],"import logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\nimport {\n    Route,\n    BrowserRouter,\n    Routes,\n} from \"react-router-dom\";\nimport Home from './Home';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport 'react-bootstrap';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Routes>\n      <Route exact path=\"/\" element={<Home/>}></Route>\n      </Routes>\n    </BrowserRouter>\n    \n  );\n}\n\nexport default App;\n","/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/reportWebVitals.js",[],"/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/Home.js",["62","63","64","65"],"\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { ProgressBar } from 'react-bootstrap';\n\nimport Nav from './features/navBar';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\n// import GraphManager from './features/graphManager'\nimport GraphManager from './features/newGraphFormat'\n\n\n\nfunction Home() {\n    //usestate of weather data, can be an array\n    //useState of soil Moisture data, can also be an array\n\n    const [restAPI, setRestAPI] = useState([]); //will contain backend sensor data.\n\n    /* form of \n        [temp : 25,\n\t\thumidity : 88,\n\t\tpressure : 101325,\n\t\tdescription : 'sun',\n        weathercode : 200\n        sM : 100\n        VBat: 69]\n        \n        add picture functionality.\n    */\n    const [loading, setLoading] = useState(true); //only display page once data is loaded\n    const [err, setError] = useState(null); // handle errors\n    useEffect(() => { //render website when mounted\n\n        const fetchData = async () => { //used callback hell because await was throwing issues\n\n            fetch('/api').then(re => {\n                if (re.ok) {\n                    return re.json()\n                }\n                throw re\n            }).then(data => {\n                setRestAPI(data)\n                console.log(data)\n\n            }).catch(err => {\n                console.log(err)\n                //setError(err)\n            }).finally(() => {\n                setLoading(false);\n\n            })\n\n\n        }\n       \n        fetchData()\n\n\n    }, []) \n\n    \n    if (err) return \"error\";\n\n    return (\n        <div className=\"Home\">\n            <Nav />\n            <div>\n            \n                <GraphManager data={restAPI} />\n            </div>\n            \n        </div>\n\n    );\n\n}\nexport default Home;\n\n\n\n\n\n","/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/features/navBar.js",["66"],"import React, { Component } from 'react';\n\nimport {Navbar, Container} from 'react-bootstrap';\n//handle navBar\n\nfunction Nav(){\n    return(\n        <Navbar bg=\"dark\" variant=\"dark\" style={{ marginBottom: '1em' }}>\n          <Container>\n            <Navbar.Brand className=\"navbar-brand mx-auto\" style={{ fontSize: \"1.75em\" }}>\n              Soil Moisture Data\n</Navbar.Brand>\n            <Navbar.Collapse className=\"justify-content-end\">\n              <Navbar.Text>\n                Eric Galluzzi : ericbriangall2004@gmail.com\n</Navbar.Text>\n            </Navbar.Collapse>\n          </Container>\n        </Navbar>\n        \n    );\n\n\n\n\n}\nexport default Nav;","/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/testFeatures/LineChartTest.js",["67","68","69","70","71","72","73"],"/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/testFeatures/BreakComputer.js",["74","75","76","77","78","79"],"/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/features/graphManager.js",["80","81"],"import React, { useState, useEffect } from 'react'\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  BarController,\n  BarElement,\n} from 'chart.js';\nimport { ProgressBar } from 'react-bootstrap';\nimport { Line, Bar } from 'react-chartjs-2';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  BarController,\n  BarElement\n);\n\n\nconst GraphManager = (chart) => {\n  let [vBat, setVBat] = useState([]); //Holds Battery Voltage value for Bar chart\n  let [dataSet, setDataSet] = useState([]); //Contains datasets for line graph. \n  \n \n  let [isLoaded, setLoaded] = useState(false); //duplicate testing for dev\n\n  useEffect(() => {\n\n\n    if (chart.data.length > 0) { //only render when actual data is passed in.\n      if (!isLoaded) { //only render once\n\n      \n        createDataSets(); //create Data Sets\n        vBatDisplay(); //create vBat display\n        setLoaded(true);\n\n      }\n    }\n\n    //createDataSets()\n\n  }, [chart]) //rerender when restAPI data changes on Home.js\n\n\n  \n\n\n\n \n\n  //essentially just map a dataset. \n  const createDataSets = () => {\n\n\n    setDataSet(chart.data.map(x => ({\n      label: (typeof x.sensorID === 'undefined') ? 'No Sensor ID' : x.sensorID,\n      data: x.entry.map((y) => y.sM),//data would require parsing through the entry component of each document.\n      borderWidth: 1,\n      fill: false,\n      borderColor: 'red'\n    })))\n\n  }\n\n  const vBatDisplay = () => {\n\n    setVBat(chart.data.map(x => ({\n       \"sensorID\": (typeof x.sensorID === 'undefined') ? 'No Sensor ID' : x.sensorID,\n      \"vBat\": x.entry[x.entry.length-1].vBat //get latest battery voltage\n     })))\n\n\n\n\n\n\n  }\n\n\n\n\n  var moistureData = {\n    labels: chart?.data[0]?.entry?.map(y=> y.recordedAt), //fix for legend lengths (do line with max value)\n    datasets: dataSet\n  };\n\n  var options = {\n    maintainAspectRatio: false,\n    plugins: {\n      title: {\n        display: true,\n        text: 'Soil Moisture Data'\n      }\n    },\n    scales: {\n    },\n    legend: {\n      labels: {\n        fontSize: 25,\n      },\n    },\n  }\n\n  const displayVBat = {\n    labels: chart.data.map(x => x.sensorID),\n    datasets: [\n      {\n        label: 'Battery Voltage',\n\n        borderColor: 'red',\n        borderWidth: 2,\n        data: chart.data.map(x => (x.entry[x.entry.length-1].vBat/1000.0))\n      }\n    ]\n  }\n  console.log(vBat);\n  return (\n    <div>\n      <br />\n      <br />\n      <div className='moistureGraph'>\n        <Line\n          data={moistureData}\n          height={400}\n          options={options}\n        />\n      </div>\n      <div className='voltageGraph'>\n        <Bar\n          data={displayVBat}\n          height={400}\n          options={options}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default GraphManager","/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/testFeatures/reFactorV2.js",["82","83"],"import React, { useState, useEffect } from 'react'\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  BarController,\n  BarElement,\n} from 'chart.js';\nimport { ProgressBar } from 'react-bootstrap';\nimport { Line, Bar } from 'react-chartjs-2';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  BarController,\n  BarElement\n);\n\n\nconst GraphManager = (chart) => {\n  let [vBat, setVBat] = useState([]); //format, array of object ID and vBat\n  let [dataSet, setDataSet] = useState([]);\n  \n \n  let [isLoaded, setLoaded] = useState(false); //duplicate testing for dev\n\n  useEffect(() => {\n\n\n    if (chart.data.length > 0) {\n      if (!isLoaded) {\n\n    \n        createDataSets();\n        vBatDisplay();\n        setLoaded(true);\n\n      }\n    }\n\n    //createDataSets()\n\n  }, [chart])\n\n\n  \n\n\n\n//chart->data->each data member then has to map through its entries\n\n \n\n  //essentially just map a dataset. \n  const createDataSets = () => {\n\n\n    setDataSet(chart.data.map(x => ({\n      label: (typeof x.sensorID === 'undefined') ? 'No Sensor ID' : x.sensorID,\n      data: x.entry.map((y) => y.sM),//might not need\n      borderWidth: 1,\n      fill: false,\n      borderColor: 'red'\n    })))\n\n  }\n\n  const vBatDisplay = () => {\n\n    setVBat(chart.data.map(x => ({\n       \"sensorID\": (typeof x.sensorID === 'undefined') ? 'No Sensor ID' : x.sensorID,\n      \"vBat\": x.entry[x.entry.length-1].vBat //see if this value is anything\n     })))\n\n\n\n\n\n\n  }\n\n\n\n\n  var moistureData = {\n    labels: \"hip\", //fix for legend lengths\n    datasets: dataSet\n  };\n\n  var options = {\n    maintainAspectRatio: false,\n    plugins: {\n      title: {\n        display: true,\n        text: 'Soil Moisture Data'\n      }\n    },\n    scales: {\n    },\n    legend: {\n      labels: {\n        fontSize: 25,\n      },\n    },\n  }\n\n  const displayVBat = {\n    labels: chart.data.map(x => x.sensorID),\n    datasets: [\n      {\n        label: 'Battery Voltage',\n\n        borderColor: 'red',\n        borderWidth: 2,\n        data: chart.data.map(x => (x.entry[x.entry.length-1].vBat/1000.0))\n      }\n    ]\n  }\n  console.log(vBat);\n  return (\n    <div>\n      <br />\n      <br />\n      <div className='moistureGraph'>\n        <Line\n          data={moistureData}\n          height={400}\n          options={options}\n        />\n      </div>\n      <div className='voltageGraph'>\n        <Bar\n          data={displayVBat}\n          height={400}\n          options={options}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default GraphManager","/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/features/newGraphFormat.js",["84","85","86"],"import React, { useState, useEffect } from 'react'\nimport '../App.css';\nimport WeatherUpdate from './WeatherUpdate'\nimport Alert from '../testFeatures/Alert'\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  BarController,\n  BarElement,\n} from 'chart.js';\nimport { ProgressBar } from 'react-bootstrap';\nimport { Line, Bar } from 'react-chartjs-2';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  BarController,\n  BarElement\n);\n\n\nconst GraphManager = (chart) => {\n  let [vBat, setVBat] = useState([]); //Holds Battery Voltage value for Bar chart\n  let [graphSet, setGraphSet] = useState([]); //Contains datasets for line graph. \n\n \n  let [isLoaded, setLoaded] = useState(false); //duplicate testing for dev\n\n  useEffect(() => {\n\n\n    if (chart.data.length > 0) { //only render when actual data is passed in.\n        \n      if (!isLoaded) { //only render once\n\n      \n        createGraphs(); //create Data Sets\n        \n        vBatDisplay(); //create vBat display\n        setLoaded(true);\n\n      }\n    }\n\n    //createGraphSets()\n\n  }, [chart]) //rerender when restAPI data changes on Home.js\n\n\n  \n\n\n\n \n\n  //essentially just map a dataset. \n\n  //setGraphSet-> setGraphs \n\n  /*\nmap a graph for each after creating a a set of graph data\n\n//each label equals its own date\n//each data set has label sensor ID // could change since title could be sensor ID\n//data - map sM.\n\n\n\n  */\n const createGraphs = () => {\n     setGraphSet(chart.data.map(x=>({\n         labels: x.entry.map(y=> y.Date), //add time :(((())))\n         datasets : [{\n            label : x.sensorID,\n            data: x.entry.map((y) => y.sM),\n            borderWidth: 1,\n            fill: false,\n            borderColor: 'red'\n\n         }]\n     })))\n     \n }\n\n  const vBatDisplay = () => {\n\n    setVBat(chart.data.map(x => ({\n       \"sensorID\": (typeof x.sensorID === 'undefined') ? 'No Sensor ID' : x.sensorID,\n      \"vBat\": x.entry[x.entry.length-1].vBat //get latest battery voltage\n     })))\n\n\n\n\n\n\n  }\n\n\n\n\n//   var moistureData = {\n//     labels: chart?.data[0]?.entry?.map(y=> y.recordedAt), //fix for legend lengths (do line with max value)\n//     datasets: graphSet\n//   };\n\n  var options = {\n    maintainAspectRatio: false,\n    plugins: {\n      title: {\n        display: true,\n        text: 'Soil Moisture Data'\n      }\n    },\n    scales: {\n        y: {\n          beginAtZero: true\n        }\n      },\n    legend: {\n      labels: {\n        fontSize: 25,\n      },\n    },\n  }\n\n  const displayVBat = {\n    labels: chart.data.map(x => x.sensorID),\n    datasets: [\n      {\n        label: 'Battery Voltage',\n\n        borderColor: 'red',\n        borderWidth: 2,\n        data: chart.data.map(x => (x.entry[x.entry.length-1].vBat/1000.0))\n      }\n    ]\n  }\n  \n\n  graphSet.map((x)=> {\n      \n    console.log(x)\n      \n  })\n  \n  return (\n\n      \n      <div className='moistureGraphs'>\n      \n    \n    <WeatherUpdate/>\n  \n    \n      {graphSet.length > 0 ?  \n        graphSet.map((x,i)=> (\n        <div className = \"sub chart-wrapper\" key = {i}>\n        <Line \n          data = {x}\n          height = {400}\n          options = {options} \n\n      /></div>)) : \"Soil Moisture Graphs Unavailable\"}\n        \n      \n\n      <div className = 'alerts'>\n        <Alert/>\n      </div>\n      \n      <div className='voltageGraph'>\n        {vBat.length > 0? <Bar\n          data={displayVBat}\n          height={400}\n          options={options}\n        /> : \"Battery Voltage Unavailable\"}\n      </div >\n      <p style ={{textAlign: \"center\", color: 'red'}}> Values greater than 4.2 Volts indicate solar power is charging </p>\n      </div>\n    \n  )\n}\n\nexport default GraphManager","/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/features/WeatherUpdate.js",["87","88"],"\nimport React, { useState, useEffect } from 'react';\nimport '../App.css';\n\n\nconst apiKey = process.env.REACT_APP_WEATHER_KEY;\n\n\n// import GraphManager from './features/graphManager'\n\n\n\n\nfunction WeatherUpdate() {\n    //usestate of weather data, can be an array\n    //useState of soil Moisture data, can also be an array\n\n    const [weatherAPI, setWeatherAPI] = useState([]); //will contain backend sensor data.\n\n    /* form of \n        [temp : 25,\n\t\thumidity : 88,\n\t\tpressure : 101325,\n\t\tdescription : 'sun',\n        weathercode : 200\n        sM : 100\n        VBat: 69]\n        \n        add picture functionality.\n    */\n    const [loading, setLoading] = useState(true); //only display page once data is loaded\n    const [err, setError] = useState(null); // handle errors\n    useEffect(() => { //render website when mounted\n\n        const fetchData = async () => { //used callback hell because await was throwing issues\n\n            fetch(`http://api.openweathermap.org/data/2.5/weather?id=4151824&appid=${apiKey}`).then(re => {\n                if (re.ok) {\n                    return re.json()\n                }\n                throw re\n            }).then(data => {\n                setWeatherAPI(data)\n                console.log(data)\n\n            }).catch(err => {\n                console.log(err)\n                //setError(err)\n            }).finally(() => {\n                console.log(weatherAPI);\n                setLoading(false);\n\n            })\n\n\n        }\n       \n        fetchData()\n\n\n    }, []) \n\n    \n    if (err) return \"error\";\n    if (loading) return \"loading\";\n\n    return (\n        <div className = \"WeatherData\">\n            {/* <h2>Weather in the Coop</h2>\n            <ul>\n                <li>Temperature: {(((weatherAPI.main.temp)-273.15) * 9/5 + 32).toFixed(2)}°</li>\n                <li>Humidity: {weatherAPI.main.humidity}% </li>\n                <li>Description: {weatherAPI.weather[0].description}</li>\n                <li>Some Extra Desc: {weatherAPI.weather[0].main}</li>\n            </ul> */}\n              <div className=\"App\">\n    <header className=\"d-flex justify-content-center align-items-center\">\n      <h2>SNHS Presents...</h2>\n    </header>\n    <div className=\"container\">\n      <div className=\"mt-3 d-flex flex-column justify-content-center align-items-center\">\n        \n        \n      </div>\n\n      <div className=\"card mt-3 mx-auto\" style={{ width: '60vw' }}>\n        {weatherAPI.main ? (\n          <div className=\"card-body text-center\">\n            <img\n              src={`http://openweathermap.org/img/w/${weatherAPI.weather[0].icon}.png`}\n              alt=\"weather status icon\"\n              className=\"weather-icon\"\n            />\n\n            <p className=\"h2\">\n              {(((weatherAPI.main.temp)-273.15) * 9/5 + 32).toFixed(2)}&deg; F\n            </p>\n\n            <p className=\"h5\">\n              <i className=\"fas fa-map-marker-alt\"></i>{' '}\n              <strong>{weatherAPI.name}</strong>\n            </p>\n\n            <div className=\"row mt-4\">\n              <div className=\"col-md-6\">\n                <p>\n                  <i className=\"fas fa-temperature-low \"></i>{' '}\n                  <strong>\n                    {(weatherAPI.main.humidity)}% \n                  </strong>\n                </p>\n                <p>\n                  <i className=\"fas fa-temperature-high\"></i>{' '}\n                  <strong>\n                    {weatherAPI.main.pressure}hPa\n                  </strong>\n                </p>\n              </div>\n              <div className=\"col-md-6\">\n                <p>\n                  {' '}\n                  <strong>{weatherAPI.weather[0].main}</strong>\n                </p>\n                <p><strong>{typeof weatherAPI.rain === 'undefined' ? \"0 \" : weatherAPI.rain['1h']} hourly mm. of PRCP</strong></p>\n              </div>\n            </div>\n          </div>\n        ) : (\n          <h1>Loading</h1>\n        )}\n      </div>\n    </div>\n    <footer className=\"footer\">\n      <code>\n        Created by{' '}\n        <a href=\"https://github.com/imshines\" target=\"none\">\n          imshines\n        </a>{' '}\n        using React\n      </code>\n    </footer>\n  </div>\n  \n\n        </div>)\n\n}\nexport default WeatherUpdate;\n\n\n\n\n\n","/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/testFeatures/Alert.js",["89","90"],"\nimport React, { useState, useEffect } from 'react';\nimport '../App.css';\n\n\n\n\n\n// import GraphManager from './features/graphManager'\n\n\n\n\nfunction Alert() {\n \n    const [alert, setAlert] = useState([]); //will contain what is returned from alert- can be an array or string?\n\n    const [loading, setLoading] = useState(true); //only display page once data is loaded\n    const [err, setError] = useState(null); // handle errors\n    useEffect(() => { //render website when mounted\n\n        const fetchData = async () => { //used callback hell because await was throwing issues\n\n            fetch(`/alert`).then(re => {\n                if (re.ok) {\n                    return re.json()\n                }\n                throw re\n            }).then(data => {\n                setAlert(data)\n                console.log(data)\n\n            }).catch(err => {\n                console.log(err)\n                //setError(err)\n            }).finally(() => {\n                setLoading(false);\n\n            })\n\n\n        }\n       \n        fetchData()\n\n\n    }, []) \n\n    \n    if (err) return \"error\";\n    if (loading) return \"loading\";\n\n    return (\n        <div className = \"AlertData\">\n            <h1 style = {{color: 'red'}}>Alerts by Sensor: (GeoTagging soon...)</h1>\n                <table>\n                <tr>\n                    <th>SensorID</th>&nbsp;\n                    <th>Risk Level Detected</th>\n                </tr>\n                {alert.map(x=> {\n                   let color;\n                   switch(x.risk){\n                    case 0: color = 'green'; break;\n                    case 1: color = 'orange';break;\n                    case 2: color = 'red'; break;\n                   }\n                   return  (\n                    <tr key = {x.sensorID}>\n                        <td>{x.sensorID}</td>&nbsp;\n                        <td style = {{color: color}}> {x.info}</td>\n                    </tr>\n                    // <p style = {{color: color}}>{x.sensorID}: {x.info}</p>\n                    \n                )\n            })\n        }\n        </table>\n                \n\n        </div>)\n\n}\nexport default Alert;\n",{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":1,"column":8,"nodeType":"97","messageId":"98","endLine":1,"endColumn":12},{"ruleId":"95","severity":1,"message":"99","line":3,"column":10,"nodeType":"97","messageId":"98","endLine":3,"endColumn":14},{"ruleId":"95","severity":1,"message":"100","line":4,"column":10,"nodeType":"97","messageId":"98","endLine":4,"endColumn":21},{"ruleId":"95","severity":1,"message":"101","line":31,"column":12,"nodeType":"97","messageId":"98","endLine":31,"endColumn":19},{"ruleId":"95","severity":1,"message":"102","line":32,"column":17,"nodeType":"97","messageId":"98","endLine":32,"endColumn":25},{"ruleId":"95","severity":1,"message":"103","line":1,"column":17,"nodeType":"97","messageId":"98","endLine":1,"endColumn":26},{"ruleId":"95","severity":1,"message":"100","line":12,"column":10,"nodeType":"97","messageId":"98","endLine":12,"endColumn":21},{"ruleId":"95","severity":1,"message":"104","line":27,"column":10,"nodeType":"97","messageId":"98","endLine":27,"endColumn":14},{"ruleId":"105","severity":1,"message":"106","line":30,"column":15,"nodeType":"107","messageId":"108","endLine":30,"endColumn":52,"fix":"109"},{"ruleId":"105","severity":1,"message":"110","line":30,"column":15,"nodeType":"107","messageId":"108","endLine":30,"endColumn":35,"fix":"111"},{"ruleId":"105","severity":1,"message":"112","line":30,"column":15,"nodeType":"107","messageId":"108","endLine":30,"endColumn":27,"fix":"113"},{"ruleId":"114","severity":1,"message":"115","line":32,"column":8,"nodeType":"116","endLine":32,"endColumn":15,"suggestions":"117"},{"ruleId":"105","severity":1,"message":"112","line":57,"column":15,"nodeType":"107","messageId":"108","endLine":57,"endColumn":27,"fix":"118"},{"ruleId":"95","severity":1,"message":"100","line":14,"column":10,"nodeType":"97","messageId":"98","endLine":14,"endColumn":21},{"ruleId":"95","severity":1,"message":"119","line":34,"column":8,"nodeType":"97","messageId":"98","endLine":34,"endColumn":22},{"ruleId":"114","severity":1,"message":"120","line":53,"column":6,"nodeType":"116","endLine":53,"endColumn":13,"suggestions":"121"},{"ruleId":"122","severity":1,"message":"123","line":60,"column":22,"nodeType":"124","messageId":"125","endLine":60,"endColumn":24},{"ruleId":"122","severity":1,"message":"123","line":62,"column":21,"nodeType":"124","messageId":"125","endLine":62,"endColumn":23},{"ruleId":"126","severity":1,"message":"127","line":90,"column":18,"nodeType":"128","messageId":"129","endLine":90,"endColumn":20},{"ruleId":"95","severity":1,"message":"100","line":14,"column":10,"nodeType":"97","messageId":"98","endLine":14,"endColumn":21},{"ruleId":"114","severity":1,"message":"130","line":53,"column":6,"nodeType":"116","endLine":53,"endColumn":13,"suggestions":"131"},{"ruleId":"95","severity":1,"message":"100","line":14,"column":10,"nodeType":"97","messageId":"98","endLine":14,"endColumn":21},{"ruleId":"114","severity":1,"message":"130","line":53,"column":6,"nodeType":"116","endLine":53,"endColumn":13,"suggestions":"132"},{"ruleId":"95","severity":1,"message":"100","line":17,"column":10,"nodeType":"97","messageId":"98","endLine":17,"endColumn":21},{"ruleId":"114","severity":1,"message":"133","line":58,"column":6,"nodeType":"116","endLine":58,"endColumn":13,"suggestions":"134"},{"ruleId":"122","severity":1,"message":"123","line":152,"column":19,"nodeType":"124","messageId":"125","endLine":152,"endColumn":21},{"ruleId":"95","severity":1,"message":"102","line":32,"column":17,"nodeType":"97","messageId":"98","endLine":32,"endColumn":25},{"ruleId":"114","severity":1,"message":"135","line":61,"column":8,"nodeType":"116","endLine":61,"endColumn":10,"suggestions":"136"},{"ruleId":"95","severity":1,"message":"102","line":19,"column":17,"nodeType":"97","messageId":"98","endLine":19,"endColumn":25},{"ruleId":"137","severity":1,"message":"138","line":63,"column":20,"nodeType":"139","messageId":"140","endLine":67,"endColumn":21},"no-native-reassign",["141"],"no-negated-in-lhs",["142"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'ProgressBar' is defined but never used.","'loading' is assigned a value but never used.","'setError' is assigned a value but never used.","'Component' is defined but never used.","'vBat' is assigned a value but never used.","no-whitespace-before-property","Unexpected whitespace before property VBat.","MemberExpression","unexpectedWhitespace",{"range":"143","text":"144"},"Unexpected whitespace before property slice.",{"range":"145","text":"144"},"Unexpected whitespace before property data.",{"range":"146","text":"144"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'createDataSets'. Either include it or remove the dependency array.","ArrayExpression",["147"],{"range":"148","text":"144"},"'bigArrayLoaded' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'createDataSets', 'initializeBigArray', 'isLoaded', and 'vBatDisplay'. Either include them or remove the dependency array.",["149"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'createDataSets', 'isLoaded', and 'vBatDisplay'. Either include them or remove the dependency array.",["150"],["151"],"React Hook useEffect has missing dependencies: 'createGraphs', 'isLoaded', and 'vBatDisplay'. Either include them or remove the dependency array.",["152"],"React Hook useEffect has a missing dependency: 'weatherAPI'. Either include it or remove the dependency array.",["153"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation",[579,582],"?.",[561,564],[554,557],{"desc":"154","fix":"155"},[1522,1525],{"desc":"156","fix":"157"},{"desc":"158","fix":"159"},{"desc":"158","fix":"160"},{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},"Update the dependencies array to be: [chart, createDataSets]",{"range":"165","text":"166"},"Update the dependencies array to be: [chart, createDataSets, initializeBigArray, isLoaded, vBatDisplay]",{"range":"167","text":"168"},"Update the dependencies array to be: [chart, createDataSets, isLoaded, vBatDisplay]",{"range":"169","text":"170"},{"range":"171","text":"170"},"Update the dependencies array to be: [chart, createGraphs, isLoaded, vBatDisplay]",{"range":"172","text":"173"},"Update the dependencies array to be: [weatherAPI]",{"range":"174","text":"175"},[698,705],"[chart, createDataSets]",[1028,1035],"[chart, createDataSets, initializeBigArray, isLoaded, vBatDisplay]",[1050,1057],"[chart, createDataSets, isLoaded, vBatDisplay]",[900,907],[1174,1181],"[chart, createGraphs, isLoaded, vBatDisplay]",[1506,1508],"[weatherAPI]"]