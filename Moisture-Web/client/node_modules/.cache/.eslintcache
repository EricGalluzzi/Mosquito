[{"/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/index.js":"1","/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/App.js":"2","/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/reportWebVitals.js":"3","/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/Home.js":"4","/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/features/navBar.js":"5","/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/testFeatures/LineChartTest.js":"6","/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/testFeatures/BreakComputer.js":"7","/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/features/graphManager.js":"8","/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/testFeatures/reFactorV2.js":"9","/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/features/newGraphFormat.js":"10","/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/features/WeatherUpdate.js":"11","/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/testFeatures/Alert.js":"12"},{"size":462,"mtime":1641577743256,"results":"13","hashOfConfig":"14"},{"size":461,"mtime":1641579104440,"results":"15","hashOfConfig":"14"},{"size":362,"mtime":1641575237660,"results":"16","hashOfConfig":"14"},{"size":1813,"mtime":1645668713211,"results":"17","hashOfConfig":"14"},{"size":653,"mtime":1644242255796,"results":"18","hashOfConfig":"14"},{"size":2063,"mtime":1642909419539,"results":"19","hashOfConfig":"14"},{"size":3481,"mtime":1643560047957,"results":"20","hashOfConfig":"14"},{"size":2854,"mtime":1644242734505,"results":"21","hashOfConfig":"14"},{"size":2606,"mtime":1643686032934,"results":"22","hashOfConfig":"14"},{"size":3758,"mtime":1645668714467,"results":"23","hashOfConfig":"14"},{"size":4207,"mtime":1645668822152,"results":"24","hashOfConfig":"14"},{"size":2128,"mtime":1645668714623,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"8efvki",{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":4,"source":null},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},"/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/index.js",[],["58","59"],"/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/App.js",["60"],"import logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\nimport {\n    Route,\n    BrowserRouter,\n    Routes,\n} from \"react-router-dom\";\nimport Home from './Home';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport 'react-bootstrap';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Routes>\n      <Route exact path=\"/\" element={<Home/>}></Route>\n      </Routes>\n    </BrowserRouter>\n    \n  );\n}\n\nexport default App;\n","/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/reportWebVitals.js",[],"/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/Home.js",["61","62","63","64"],"\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { ProgressBar } from 'react-bootstrap';\n\nimport Nav from './features/navBar';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\n// import GraphManager from './features/graphManager'\nimport GraphManager from './features/newGraphFormat'\n\n\n\nfunction Home() {\n    //usestate of weather data, can be an array\n    //useState of soil Moisture data, can also be an array\n\n    const [restAPI, setRestAPI] = useState([]); //will contain backend sensor data.\n\n    /* form of \n        [temp : 25,\n\t\thumidity : 88,\n\t\tpressure : 101325,\n\t\tdescription : 'sun',\n        weathercode : 200\n        sM : 100\n        VBat: 69]\n        \n        add picture functionality.\n    */\n    const [loading, setLoading] = useState(true); //only display page once data is loaded\n    const [err, setError] = useState(null); // handle errors\n    useEffect(() => { //render website when mounted\n\n        const fetchData = async () => { //used callback hell because await was throwing issues\n\n            fetch('/api').then(re => {\n                if (re.ok) {\n                    return re.json()\n                }\n                throw re\n            }).then(data => {\n                setRestAPI(data)\n                console.log(data)\n\n            }).catch(err => {\n                console.log(err)\n                //setError(err)\n            }).finally(() => {\n                setLoading(false);\n\n            })\n\n\n        }\n       \n        fetchData()\n\n\n    }, []) \n\n    \n    if (err) return \"error\";\n\n    return (\n        <div className=\"Home\">\n            <Nav />\n            <div>\n            \n                <GraphManager data={restAPI} />\n            </div>\n            \n        </div>\n\n    );\n\n}\nexport default Home;\n\n\n\n\n\n","/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/features/navBar.js",["65"],"import React, { Component } from 'react';\n\nimport {Navbar, Container} from 'react-bootstrap';\n//handle navBar\n\nfunction Nav(){\n    return(\n        <Navbar bg=\"dark\" variant=\"dark\" style={{ marginBottom: '1em' }}>\n          <Container>\n            <Navbar.Brand className=\"navbar-brand mx-auto\" style={{ fontSize: \"1.75em\" }}>\n              Soil Moisture Data\n</Navbar.Brand>\n            <Navbar.Collapse className=\"justify-content-end\">\n              <Navbar.Text>\n                Eric Galluzzi : ericbriangall2004@gmail.com\n</Navbar.Text>\n            </Navbar.Collapse>\n          </Container>\n        </Navbar>\n        \n    );\n\n\n\n\n}\nexport default Nav;","/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/testFeatures/LineChartTest.js",["66","67","68","69","70","71","72"],"/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/testFeatures/BreakComputer.js",["73","74","75","76","77","78"],"/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/features/graphManager.js",["79","80"],"import React, { useState, useEffect } from 'react'\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  BarController,\n  BarElement,\n} from 'chart.js';\nimport { ProgressBar } from 'react-bootstrap';\nimport { Line, Bar } from 'react-chartjs-2';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  BarController,\n  BarElement\n);\n\n\nconst GraphManager = (chart) => {\n  let [vBat, setVBat] = useState([]); //Holds Battery Voltage value for Bar chart\n  let [dataSet, setDataSet] = useState([]); //Contains datasets for line graph. \n  \n \n  let [isLoaded, setLoaded] = useState(false); //duplicate testing for dev\n\n  useEffect(() => {\n\n\n    if (chart.data.length > 0) { //only render when actual data is passed in.\n      if (!isLoaded) { //only render once\n\n      \n        createDataSets(); //create Data Sets\n        vBatDisplay(); //create vBat display\n        setLoaded(true);\n\n      }\n    }\n\n    //createDataSets()\n\n  }, [chart]) //rerender when restAPI data changes on Home.js\n\n\n  \n\n\n\n \n\n  //essentially just map a dataset. \n  const createDataSets = () => {\n\n\n    setDataSet(chart.data.map(x => ({\n      label: (typeof x.sensorID === 'undefined') ? 'No Sensor ID' : x.sensorID,\n      data: x.entry.map((y) => y.sM),//data would require parsing through the entry component of each document.\n      borderWidth: 1,\n      fill: false,\n      borderColor: 'red'\n    })))\n\n  }\n\n  const vBatDisplay = () => {\n\n    setVBat(chart.data.map(x => ({\n       \"sensorID\": (typeof x.sensorID === 'undefined') ? 'No Sensor ID' : x.sensorID,\n      \"vBat\": x.entry[x.entry.length-1].vBat //get latest battery voltage\n     })))\n\n\n\n\n\n\n  }\n\n\n\n\n  var moistureData = {\n    labels: chart?.data[0]?.entry?.map(y=> y.recordedAt), //fix for legend lengths (do line with max value)\n    datasets: dataSet\n  };\n\n  var options = {\n    maintainAspectRatio: false,\n    plugins: {\n      title: {\n        display: true,\n        text: 'Soil Moisture Data'\n      }\n    },\n    scales: {\n    },\n    legend: {\n      labels: {\n        fontSize: 25,\n      },\n    },\n  }\n\n  const displayVBat = {\n    labels: chart.data.map(x => x.sensorID),\n    datasets: [\n      {\n        label: 'Battery Voltage',\n\n        borderColor: 'red',\n        borderWidth: 2,\n        data: chart.data.map(x => (x.entry[x.entry.length-1].vBat/1000.0))\n      }\n    ]\n  }\n  console.log(vBat);\n  return (\n    <div>\n      <br />\n      <br />\n      <div className='moistureGraph'>\n        <Line\n          data={moistureData}\n          height={400}\n          options={options}\n        />\n      </div>\n      <div className='voltageGraph'>\n        <Bar\n          data={displayVBat}\n          height={400}\n          options={options}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default GraphManager","/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/testFeatures/reFactorV2.js",["81","82"],"import React, { useState, useEffect } from 'react'\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  BarController,\n  BarElement,\n} from 'chart.js';\nimport { ProgressBar } from 'react-bootstrap';\nimport { Line, Bar } from 'react-chartjs-2';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  BarController,\n  BarElement\n);\n\n\nconst GraphManager = (chart) => {\n  let [vBat, setVBat] = useState([]); //format, array of object ID and vBat\n  let [dataSet, setDataSet] = useState([]);\n  \n \n  let [isLoaded, setLoaded] = useState(false); //duplicate testing for dev\n\n  useEffect(() => {\n\n\n    if (chart.data.length > 0) {\n      if (!isLoaded) {\n\n    \n        createDataSets();\n        vBatDisplay();\n        setLoaded(true);\n\n      }\n    }\n\n    //createDataSets()\n\n  }, [chart])\n\n\n  \n\n\n\n//chart->data->each data member then has to map through its entries\n\n \n\n  //essentially just map a dataset. \n  const createDataSets = () => {\n\n\n    setDataSet(chart.data.map(x => ({\n      label: (typeof x.sensorID === 'undefined') ? 'No Sensor ID' : x.sensorID,\n      data: x.entry.map((y) => y.sM),//might not need\n      borderWidth: 1,\n      fill: false,\n      borderColor: 'red'\n    })))\n\n  }\n\n  const vBatDisplay = () => {\n\n    setVBat(chart.data.map(x => ({\n       \"sensorID\": (typeof x.sensorID === 'undefined') ? 'No Sensor ID' : x.sensorID,\n      \"vBat\": x.entry[x.entry.length-1].vBat //see if this value is anything\n     })))\n\n\n\n\n\n\n  }\n\n\n\n\n  var moistureData = {\n    labels: \"hip\", //fix for legend lengths\n    datasets: dataSet\n  };\n\n  var options = {\n    maintainAspectRatio: false,\n    plugins: {\n      title: {\n        display: true,\n        text: 'Soil Moisture Data'\n      }\n    },\n    scales: {\n    },\n    legend: {\n      labels: {\n        fontSize: 25,\n      },\n    },\n  }\n\n  const displayVBat = {\n    labels: chart.data.map(x => x.sensorID),\n    datasets: [\n      {\n        label: 'Battery Voltage',\n\n        borderColor: 'red',\n        borderWidth: 2,\n        data: chart.data.map(x => (x.entry[x.entry.length-1].vBat/1000.0))\n      }\n    ]\n  }\n  console.log(vBat);\n  return (\n    <div>\n      <br />\n      <br />\n      <div className='moistureGraph'>\n        <Line\n          data={moistureData}\n          height={400}\n          options={options}\n        />\n      </div>\n      <div className='voltageGraph'>\n        <Bar\n          data={displayVBat}\n          height={400}\n          options={options}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default GraphManager","/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/features/newGraphFormat.js",["83","84","85"],"import React, { useState, useEffect } from 'react'\nimport '../App.css';\nimport WeatherUpdate from './WeatherUpdate'\nimport Alert from '../testFeatures/Alert'\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  BarController,\n  BarElement,\n} from 'chart.js';\nimport { ProgressBar } from 'react-bootstrap';\nimport { Line, Bar } from 'react-chartjs-2';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  BarController,\n  BarElement\n);\n\n\nconst GraphManager = (chart) => {\n  let [vBat, setVBat] = useState([]); //Holds Battery Voltage value for Bar chart\n  let [graphSet, setGraphSet] = useState([]); //Contains datasets for line graph. \n\n \n  let [isLoaded, setLoaded] = useState(false); //duplicate testing for dev\n\n  useEffect(() => {\n\n\n    if (chart.data.length > 0) { //only render when actual data is passed in.\n        \n      if (!isLoaded) { //only render once\n\n      \n        createGraphs(); //create Data Sets\n        \n        vBatDisplay(); //create vBat display\n        setLoaded(true);\n\n      }\n    }\n\n    //createGraphSets()\n\n  }, [chart]) //rerender when restAPI data changes on Home.js\n\n\n  \n\n\n\n \n\n  //essentially just map a dataset. \n\n  //setGraphSet-> setGraphs \n\n  /*\nmap a graph for each after creating a a set of graph data\n\n//each label equals its own date\n//each data set has label sensor ID // could change since title could be sensor ID\n//data - map sM.\n\n\n\n  */\n const createGraphs = () => {\n     setGraphSet(chart.data.map(x=>({\n         labels: x.entry.map(y=> y.Date), //add time :(((())))\n         datasets : [{\n            label : x.sensorID,\n            data: x.entry.map((y) => y.sM),\n            borderWidth: 1,\n            fill: false,\n            borderColor: 'red'\n\n         }]\n     })))\n     \n }\n\n  const vBatDisplay = () => {\n\n    setVBat(chart.data.map(x => ({\n       \"sensorID\": (typeof x.sensorID === 'undefined') ? 'No Sensor ID' : x.sensorID,\n      \"vBat\": x.entry[x.entry.length-1].vBat //get latest battery voltage\n     })))\n\n\n\n\n\n\n  }\n\n\n\n\n//   var moistureData = {\n//     labels: chart?.data[0]?.entry?.map(y=> y.recordedAt), //fix for legend lengths (do line with max value)\n//     datasets: graphSet\n//   };\n\n  var options = {\n    maintainAspectRatio: false,\n    plugins: {\n      title: {\n        display: true,\n        text: 'Soil Moisture Data'\n      }\n    },\n    scales: {\n        y: {\n          beginAtZero: true\n        }\n      },\n    legend: {\n      labels: {\n        fontSize: 25,\n      },\n    },\n  }\n\n  const displayVBat = {\n    labels: chart.data.map(x => x.sensorID),\n    datasets: [\n      {\n        label: 'Battery Voltage',\n\n        borderColor: 'red',\n        borderWidth: 2,\n        data: chart.data.map(x => (x.entry[x.entry.length-1].vBat/1000.0))\n      }\n    ]\n  }\n  \n\n  graphSet.map((x)=> {\n      \n    console.log(x)\n      \n  })\n  \n  return (\n\n      \n      <div className='moistureGraphs'>\n      \n    \n    <WeatherUpdate/>\n  \n    \n      {graphSet.length > 0 ?  \n        graphSet.map((x,i)=> (\n        <div className = \"sub chart-wrapper\" key = {i}>\n        <Line \n          data = {x}\n          height = {400}\n          options = {options} \n\n      /></div>)) : \"Soil Moisture Graphs Unavailable\"}\n        \n      \n\n      <div className = 'alerts'>\n        <Alert/>\n      </div>\n      \n      <div className='voltageGraph'>\n        {vBat.length > 0? <Bar\n          data={displayVBat}\n          height={400}\n          options={options}\n        /> : \"Battery Voltage Unavailable\"}\n      </div >\n      <p style ={{textAlign: \"center\", color: 'red'}}> Values greater than 4.2 Volts indicate solar power is charging </p>\n      </div>\n    \n  )\n}\n\nexport default GraphManager","/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/features/WeatherUpdate.js",["86","87"],"/Users/ericg/Desktop/SNHS/Mosquito/Moisture-Web/client/src/testFeatures/Alert.js",["88","89"],"\nimport React, { useState, useEffect } from 'react';\nimport '../App.css';\n\n\n\n\n\n// import GraphManager from './features/graphManager'\n\n\n\n\nfunction Alert() {\n \n    const [alert, setAlert] = useState([]); //will contain what is returned from alert- can be an array or string?\n\n    const [loading, setLoading] = useState(true); //only display page once data is loaded\n    const [err, setError] = useState(null); // handle errors\n    useEffect(() => { //render website when mounted\n\n        const fetchData = async () => { //used callback hell because await was throwing issues\n\n            fetch(`/alert`).then(re => {\n                if (re.ok) {\n                    return re.json()\n                }\n                throw re\n            }).then(data => {\n                setAlert(data)\n                console.log(data)\n\n            }).catch(err => {\n                console.log(err)\n                //setError(err)\n            }).finally(() => {\n                setLoading(false);\n\n            })\n\n\n        }\n       \n        fetchData()\n\n\n    }, []) \n\n    \n    if (err) return \"error\";\n    if (loading) return \"loading\";\n\n    return (\n        <div className = \"AlertData\">\n            <h1 style = {{color: 'red'}}>Alerts by Sensor: (GeoTagging soon...)</h1>\n                <table>\n                <tr>\n                    <th>SensorID</th>&nbsp;\n                    <th>Risk Level Detected</th>\n                </tr>\n                {alert.map(x=> {\n                   let color;\n                   switch(x.risk){\n                    case 0: color = 'green'; break;\n                    case 1: color = 'orange';break;\n                    case 2: color = 'red'; break;\n                   }\n                   return  (\n                    <tr key = {x.sensorID}>\n                        <td>{x.sensorID}</td>&nbsp;\n                        <td style = {{color: color}}> {x.info}</td>\n                    </tr>\n                    // <p style = {{color: color}}>{x.sensorID}: {x.info}</p>\n                    \n                )\n            })\n        }\n        </table>\n                \n\n        </div>)\n\n}\nexport default Alert;\n",{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","severity":1,"message":"95","line":1,"column":8,"nodeType":"96","messageId":"97","endLine":1,"endColumn":12},{"ruleId":"94","severity":1,"message":"98","line":3,"column":10,"nodeType":"96","messageId":"97","endLine":3,"endColumn":14},{"ruleId":"94","severity":1,"message":"99","line":4,"column":10,"nodeType":"96","messageId":"97","endLine":4,"endColumn":21},{"ruleId":"94","severity":1,"message":"100","line":31,"column":12,"nodeType":"96","messageId":"97","endLine":31,"endColumn":19},{"ruleId":"94","severity":1,"message":"101","line":32,"column":17,"nodeType":"96","messageId":"97","endLine":32,"endColumn":25},{"ruleId":"94","severity":1,"message":"102","line":1,"column":17,"nodeType":"96","messageId":"97","endLine":1,"endColumn":26},{"ruleId":"94","severity":1,"message":"99","line":12,"column":10,"nodeType":"96","messageId":"97","endLine":12,"endColumn":21},{"ruleId":"94","severity":1,"message":"103","line":27,"column":10,"nodeType":"96","messageId":"97","endLine":27,"endColumn":14},{"ruleId":"104","severity":1,"message":"105","line":30,"column":15,"nodeType":"106","messageId":"107","endLine":30,"endColumn":52,"fix":"108"},{"ruleId":"104","severity":1,"message":"109","line":30,"column":15,"nodeType":"106","messageId":"107","endLine":30,"endColumn":35,"fix":"110"},{"ruleId":"104","severity":1,"message":"111","line":30,"column":15,"nodeType":"106","messageId":"107","endLine":30,"endColumn":27,"fix":"112"},{"ruleId":"113","severity":1,"message":"114","line":32,"column":8,"nodeType":"115","endLine":32,"endColumn":15,"suggestions":"116"},{"ruleId":"104","severity":1,"message":"111","line":57,"column":15,"nodeType":"106","messageId":"107","endLine":57,"endColumn":27,"fix":"117"},{"ruleId":"94","severity":1,"message":"99","line":14,"column":10,"nodeType":"96","messageId":"97","endLine":14,"endColumn":21},{"ruleId":"94","severity":1,"message":"118","line":34,"column":8,"nodeType":"96","messageId":"97","endLine":34,"endColumn":22},{"ruleId":"113","severity":1,"message":"119","line":53,"column":6,"nodeType":"115","endLine":53,"endColumn":13,"suggestions":"120"},{"ruleId":"121","severity":1,"message":"122","line":60,"column":22,"nodeType":"123","messageId":"124","endLine":60,"endColumn":24},{"ruleId":"121","severity":1,"message":"122","line":62,"column":21,"nodeType":"123","messageId":"124","endLine":62,"endColumn":23},{"ruleId":"125","severity":1,"message":"126","line":90,"column":18,"nodeType":"127","messageId":"128","endLine":90,"endColumn":20},{"ruleId":"94","severity":1,"message":"99","line":14,"column":10,"nodeType":"96","messageId":"97","endLine":14,"endColumn":21},{"ruleId":"113","severity":1,"message":"129","line":53,"column":6,"nodeType":"115","endLine":53,"endColumn":13,"suggestions":"130"},{"ruleId":"94","severity":1,"message":"99","line":14,"column":10,"nodeType":"96","messageId":"97","endLine":14,"endColumn":21},{"ruleId":"113","severity":1,"message":"129","line":53,"column":6,"nodeType":"115","endLine":53,"endColumn":13,"suggestions":"131"},{"ruleId":"94","severity":1,"message":"99","line":17,"column":10,"nodeType":"96","messageId":"97","endLine":17,"endColumn":21},{"ruleId":"113","severity":1,"message":"132","line":58,"column":6,"nodeType":"115","endLine":58,"endColumn":13,"suggestions":"133"},{"ruleId":"121","severity":1,"message":"122","line":152,"column":19,"nodeType":"123","messageId":"124","endLine":152,"endColumn":21},{"ruleId":"94","severity":1,"message":"101","line":32,"column":17,"nodeType":"96","messageId":"97","endLine":32,"endColumn":25},{"ruleId":"113","severity":1,"message":"134","line":61,"column":8,"nodeType":"115","endLine":61,"endColumn":10,"suggestions":"135"},{"ruleId":"94","severity":1,"message":"101","line":19,"column":17,"nodeType":"96","messageId":"97","endLine":19,"endColumn":25},{"ruleId":"136","severity":1,"message":"137","line":63,"column":20,"nodeType":"138","messageId":"139","endLine":67,"endColumn":21},"no-native-reassign",["140"],"no-negated-in-lhs",["141"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'ProgressBar' is defined but never used.","'loading' is assigned a value but never used.","'setError' is assigned a value but never used.","'Component' is defined but never used.","'vBat' is assigned a value but never used.","no-whitespace-before-property","Unexpected whitespace before property VBat.","MemberExpression","unexpectedWhitespace",{"range":"142","text":"143"},"Unexpected whitespace before property slice.",{"range":"144","text":"143"},"Unexpected whitespace before property data.",{"range":"145","text":"143"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'createDataSets'. Either include it or remove the dependency array.","ArrayExpression",["146"],{"range":"147","text":"143"},"'bigArrayLoaded' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'createDataSets', 'initializeBigArray', 'isLoaded', and 'vBatDisplay'. Either include them or remove the dependency array.",["148"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'createDataSets', 'isLoaded', and 'vBatDisplay'. Either include them or remove the dependency array.",["149"],["150"],"React Hook useEffect has missing dependencies: 'createGraphs', 'isLoaded', and 'vBatDisplay'. Either include them or remove the dependency array.",["151"],"React Hook useEffect has a missing dependency: 'weatherAPI'. Either include it or remove the dependency array.",["152"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation",[579,582],"?.",[561,564],[554,557],{"desc":"153","fix":"154"},[1522,1525],{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},{"desc":"157","fix":"159"},{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},"Update the dependencies array to be: [chart, createDataSets]",{"range":"164","text":"165"},"Update the dependencies array to be: [chart, createDataSets, initializeBigArray, isLoaded, vBatDisplay]",{"range":"166","text":"167"},"Update the dependencies array to be: [chart, createDataSets, isLoaded, vBatDisplay]",{"range":"168","text":"169"},{"range":"170","text":"169"},"Update the dependencies array to be: [chart, createGraphs, isLoaded, vBatDisplay]",{"range":"171","text":"172"},"Update the dependencies array to be: [weatherAPI]",{"range":"173","text":"174"},[698,705],"[chart, createDataSets]",[1028,1035],"[chart, createDataSets, initializeBigArray, isLoaded, vBatDisplay]",[1050,1057],"[chart, createDataSets, isLoaded, vBatDisplay]",[900,907],[1174,1181],"[chart, createGraphs, isLoaded, vBatDisplay]",[1506,1508],"[weatherAPI]"]